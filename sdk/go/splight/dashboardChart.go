// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package splight

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/splightplatform/pulumi-splight/sdk/go/splight/internal"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/splightplatform/pulumi-splight/sdk/go/splight"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			tmpJSON0, err := json.Marshal([]map[string]interface{}{
//				map[string]interface{}{
//					"$match": map[string]interface{}{
//						"asset":     "1234-1234-1234-1234",
//						"attribute": "1234-1234-1234-1234",
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			tmpJSON1, err := json.Marshal([]map[string]interface{}{
//				map[string]interface{}{
//					"$match": map[string]interface{}{
//						"asset":     "1234-1234-1234-1234",
//						"attribute": "1234-1234-1234-1234",
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json1 := string(tmpJSON1)
//			_, err = splight.NewDashboardChart(ctx, "dashboardChartTest", &splight.DashboardChartArgs{
//				Type:         pulumi.String("timeseries"),
//				Tab:          pulumi.String("1234-1234-1234-1234"),
//				TimestampGte: pulumi.String("now - 6h"),
//				TimestampLte: pulumi.String("now"),
//				ChartItems: splight.DashboardChartChartItemArray{
//					&splight.DashboardChartChartItemArgs{
//						RefId:           pulumi.String("A"),
//						Type:            pulumi.String("QUERY"),
//						Color:           pulumi.String("red"),
//						ExpressionPlain: pulumi.String(""),
//						QueryPlain:      pulumi.String(json0),
//					},
//					&splight.DashboardChartChartItemArgs{
//						RefId:           pulumi.String("B"),
//						Color:           pulumi.String("blue"),
//						Type:            pulumi.String("QUERY"),
//						ExpressionPlain: pulumi.String(""),
//						QueryPlain:      pulumi.String(json1),
//					},
//				},
//				Thresholds: splight.DashboardChartThresholdArray{
//					&splight.DashboardChartThresholdArgs{
//						Color:       pulumi.String("#00edcf"),
//						DisplayText: pulumi.String("T1Test"),
//						Value:       pulumi.Float64(13.1),
//					},
//				},
//				ValueMappings: splight.DashboardChartValueMappingArray{
//					&splight.DashboardChartValueMappingArgs{
//						DisplayText: pulumi.String("MODIFICADO"),
//						MatchValue:  pulumi.String("123.3"),
//						Type:        pulumi.String("exact_match"),
//						Order:       pulumi.Int(0),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import splight:index/dashboardChart:DashboardChart [options] splight_dashbaord_chart.<name> <dashboard_chart_id>
// ```
type DashboardChart struct {
	pulumi.CustomResourceState

	// chart traces to be included
	ChartItems DashboardChartChartItemArrayOutput `pulumi:"chartItems"`
	Collection pulumi.StringPtrOutput             `pulumi:"collection"`
	// chart height in px
	Height pulumi.IntPtrOutput `pulumi:"height"`
	// name of the chart
	Name pulumi.StringOutput `pulumi:"name"`
	// id for the tab where to place the chart
	Tab pulumi.StringOutput `pulumi:"tab"`
	// optional static lines to be added to the chart as references
	Thresholds DashboardChartThresholdArrayOutput `pulumi:"thresholds"`
	// date in isoformat or shortcut string where to end reading
	TimestampGte pulumi.StringOutput `pulumi:"timestampGte"`
	// date in isoformat or shortcut string where to start reading
	TimestampLte pulumi.StringOutput `pulumi:"timestampLte"`
	// [timeseries|bargauge|..] chart type
	Type pulumi.StringOutput `pulumi:"type"`
	// optional mappings to transform data with rules
	ValueMappings DashboardChartValueMappingArrayOutput `pulumi:"valueMappings"`
	// chart width in cols (max 20)
	Width pulumi.IntPtrOutput `pulumi:"width"`
}

// NewDashboardChart registers a new resource with the given unique name, arguments, and options.
func NewDashboardChart(ctx *pulumi.Context,
	name string, args *DashboardChartArgs, opts ...pulumi.ResourceOption) (*DashboardChart, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ChartItems == nil {
		return nil, errors.New("invalid value for required argument 'ChartItems'")
	}
	if args.Tab == nil {
		return nil, errors.New("invalid value for required argument 'Tab'")
	}
	if args.TimestampGte == nil {
		return nil, errors.New("invalid value for required argument 'TimestampGte'")
	}
	if args.TimestampLte == nil {
		return nil, errors.New("invalid value for required argument 'TimestampLte'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DashboardChart
	err := ctx.RegisterResource("splight:index/dashboardChart:DashboardChart", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDashboardChart gets an existing DashboardChart resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDashboardChart(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DashboardChartState, opts ...pulumi.ResourceOption) (*DashboardChart, error) {
	var resource DashboardChart
	err := ctx.ReadResource("splight:index/dashboardChart:DashboardChart", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DashboardChart resources.
type dashboardChartState struct {
	// chart traces to be included
	ChartItems []DashboardChartChartItem `pulumi:"chartItems"`
	Collection *string                   `pulumi:"collection"`
	// chart height in px
	Height *int `pulumi:"height"`
	// name of the chart
	Name *string `pulumi:"name"`
	// id for the tab where to place the chart
	Tab *string `pulumi:"tab"`
	// optional static lines to be added to the chart as references
	Thresholds []DashboardChartThreshold `pulumi:"thresholds"`
	// date in isoformat or shortcut string where to end reading
	TimestampGte *string `pulumi:"timestampGte"`
	// date in isoformat or shortcut string where to start reading
	TimestampLte *string `pulumi:"timestampLte"`
	// [timeseries|bargauge|..] chart type
	Type *string `pulumi:"type"`
	// optional mappings to transform data with rules
	ValueMappings []DashboardChartValueMapping `pulumi:"valueMappings"`
	// chart width in cols (max 20)
	Width *int `pulumi:"width"`
}

type DashboardChartState struct {
	// chart traces to be included
	ChartItems DashboardChartChartItemArrayInput
	Collection pulumi.StringPtrInput
	// chart height in px
	Height pulumi.IntPtrInput
	// name of the chart
	Name pulumi.StringPtrInput
	// id for the tab where to place the chart
	Tab pulumi.StringPtrInput
	// optional static lines to be added to the chart as references
	Thresholds DashboardChartThresholdArrayInput
	// date in isoformat or shortcut string where to end reading
	TimestampGte pulumi.StringPtrInput
	// date in isoformat or shortcut string where to start reading
	TimestampLte pulumi.StringPtrInput
	// [timeseries|bargauge|..] chart type
	Type pulumi.StringPtrInput
	// optional mappings to transform data with rules
	ValueMappings DashboardChartValueMappingArrayInput
	// chart width in cols (max 20)
	Width pulumi.IntPtrInput
}

func (DashboardChartState) ElementType() reflect.Type {
	return reflect.TypeOf((*dashboardChartState)(nil)).Elem()
}

type dashboardChartArgs struct {
	// chart traces to be included
	ChartItems []DashboardChartChartItem `pulumi:"chartItems"`
	Collection *string                   `pulumi:"collection"`
	// chart height in px
	Height *int `pulumi:"height"`
	// name of the chart
	Name *string `pulumi:"name"`
	// id for the tab where to place the chart
	Tab string `pulumi:"tab"`
	// optional static lines to be added to the chart as references
	Thresholds []DashboardChartThreshold `pulumi:"thresholds"`
	// date in isoformat or shortcut string where to end reading
	TimestampGte string `pulumi:"timestampGte"`
	// date in isoformat or shortcut string where to start reading
	TimestampLte string `pulumi:"timestampLte"`
	// [timeseries|bargauge|..] chart type
	Type string `pulumi:"type"`
	// optional mappings to transform data with rules
	ValueMappings []DashboardChartValueMapping `pulumi:"valueMappings"`
	// chart width in cols (max 20)
	Width *int `pulumi:"width"`
}

// The set of arguments for constructing a DashboardChart resource.
type DashboardChartArgs struct {
	// chart traces to be included
	ChartItems DashboardChartChartItemArrayInput
	Collection pulumi.StringPtrInput
	// chart height in px
	Height pulumi.IntPtrInput
	// name of the chart
	Name pulumi.StringPtrInput
	// id for the tab where to place the chart
	Tab pulumi.StringInput
	// optional static lines to be added to the chart as references
	Thresholds DashboardChartThresholdArrayInput
	// date in isoformat or shortcut string where to end reading
	TimestampGte pulumi.StringInput
	// date in isoformat or shortcut string where to start reading
	TimestampLte pulumi.StringInput
	// [timeseries|bargauge|..] chart type
	Type pulumi.StringInput
	// optional mappings to transform data with rules
	ValueMappings DashboardChartValueMappingArrayInput
	// chart width in cols (max 20)
	Width pulumi.IntPtrInput
}

func (DashboardChartArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dashboardChartArgs)(nil)).Elem()
}

type DashboardChartInput interface {
	pulumi.Input

	ToDashboardChartOutput() DashboardChartOutput
	ToDashboardChartOutputWithContext(ctx context.Context) DashboardChartOutput
}

func (*DashboardChart) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardChart)(nil)).Elem()
}

func (i *DashboardChart) ToDashboardChartOutput() DashboardChartOutput {
	return i.ToDashboardChartOutputWithContext(context.Background())
}

func (i *DashboardChart) ToDashboardChartOutputWithContext(ctx context.Context) DashboardChartOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardChartOutput)
}

// DashboardChartArrayInput is an input type that accepts DashboardChartArray and DashboardChartArrayOutput values.
// You can construct a concrete instance of `DashboardChartArrayInput` via:
//
//	DashboardChartArray{ DashboardChartArgs{...} }
type DashboardChartArrayInput interface {
	pulumi.Input

	ToDashboardChartArrayOutput() DashboardChartArrayOutput
	ToDashboardChartArrayOutputWithContext(context.Context) DashboardChartArrayOutput
}

type DashboardChartArray []DashboardChartInput

func (DashboardChartArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DashboardChart)(nil)).Elem()
}

func (i DashboardChartArray) ToDashboardChartArrayOutput() DashboardChartArrayOutput {
	return i.ToDashboardChartArrayOutputWithContext(context.Background())
}

func (i DashboardChartArray) ToDashboardChartArrayOutputWithContext(ctx context.Context) DashboardChartArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardChartArrayOutput)
}

// DashboardChartMapInput is an input type that accepts DashboardChartMap and DashboardChartMapOutput values.
// You can construct a concrete instance of `DashboardChartMapInput` via:
//
//	DashboardChartMap{ "key": DashboardChartArgs{...} }
type DashboardChartMapInput interface {
	pulumi.Input

	ToDashboardChartMapOutput() DashboardChartMapOutput
	ToDashboardChartMapOutputWithContext(context.Context) DashboardChartMapOutput
}

type DashboardChartMap map[string]DashboardChartInput

func (DashboardChartMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DashboardChart)(nil)).Elem()
}

func (i DashboardChartMap) ToDashboardChartMapOutput() DashboardChartMapOutput {
	return i.ToDashboardChartMapOutputWithContext(context.Background())
}

func (i DashboardChartMap) ToDashboardChartMapOutputWithContext(ctx context.Context) DashboardChartMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardChartMapOutput)
}

type DashboardChartOutput struct{ *pulumi.OutputState }

func (DashboardChartOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardChart)(nil)).Elem()
}

func (o DashboardChartOutput) ToDashboardChartOutput() DashboardChartOutput {
	return o
}

func (o DashboardChartOutput) ToDashboardChartOutputWithContext(ctx context.Context) DashboardChartOutput {
	return o
}

// chart traces to be included
func (o DashboardChartOutput) ChartItems() DashboardChartChartItemArrayOutput {
	return o.ApplyT(func(v *DashboardChart) DashboardChartChartItemArrayOutput { return v.ChartItems }).(DashboardChartChartItemArrayOutput)
}

func (o DashboardChartOutput) Collection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardChart) pulumi.StringPtrOutput { return v.Collection }).(pulumi.StringPtrOutput)
}

// chart height in px
func (o DashboardChartOutput) Height() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DashboardChart) pulumi.IntPtrOutput { return v.Height }).(pulumi.IntPtrOutput)
}

// name of the chart
func (o DashboardChartOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DashboardChart) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// id for the tab where to place the chart
func (o DashboardChartOutput) Tab() pulumi.StringOutput {
	return o.ApplyT(func(v *DashboardChart) pulumi.StringOutput { return v.Tab }).(pulumi.StringOutput)
}

// optional static lines to be added to the chart as references
func (o DashboardChartOutput) Thresholds() DashboardChartThresholdArrayOutput {
	return o.ApplyT(func(v *DashboardChart) DashboardChartThresholdArrayOutput { return v.Thresholds }).(DashboardChartThresholdArrayOutput)
}

// date in isoformat or shortcut string where to end reading
func (o DashboardChartOutput) TimestampGte() pulumi.StringOutput {
	return o.ApplyT(func(v *DashboardChart) pulumi.StringOutput { return v.TimestampGte }).(pulumi.StringOutput)
}

// date in isoformat or shortcut string where to start reading
func (o DashboardChartOutput) TimestampLte() pulumi.StringOutput {
	return o.ApplyT(func(v *DashboardChart) pulumi.StringOutput { return v.TimestampLte }).(pulumi.StringOutput)
}

// [timeseries|bargauge|..] chart type
func (o DashboardChartOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *DashboardChart) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// optional mappings to transform data with rules
func (o DashboardChartOutput) ValueMappings() DashboardChartValueMappingArrayOutput {
	return o.ApplyT(func(v *DashboardChart) DashboardChartValueMappingArrayOutput { return v.ValueMappings }).(DashboardChartValueMappingArrayOutput)
}

// chart width in cols (max 20)
func (o DashboardChartOutput) Width() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DashboardChart) pulumi.IntPtrOutput { return v.Width }).(pulumi.IntPtrOutput)
}

type DashboardChartArrayOutput struct{ *pulumi.OutputState }

func (DashboardChartArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DashboardChart)(nil)).Elem()
}

func (o DashboardChartArrayOutput) ToDashboardChartArrayOutput() DashboardChartArrayOutput {
	return o
}

func (o DashboardChartArrayOutput) ToDashboardChartArrayOutputWithContext(ctx context.Context) DashboardChartArrayOutput {
	return o
}

func (o DashboardChartArrayOutput) Index(i pulumi.IntInput) DashboardChartOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DashboardChart {
		return vs[0].([]*DashboardChart)[vs[1].(int)]
	}).(DashboardChartOutput)
}

type DashboardChartMapOutput struct{ *pulumi.OutputState }

func (DashboardChartMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DashboardChart)(nil)).Elem()
}

func (o DashboardChartMapOutput) ToDashboardChartMapOutput() DashboardChartMapOutput {
	return o
}

func (o DashboardChartMapOutput) ToDashboardChartMapOutputWithContext(ctx context.Context) DashboardChartMapOutput {
	return o
}

func (o DashboardChartMapOutput) MapIndex(k pulumi.StringInput) DashboardChartOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DashboardChart {
		return vs[0].(map[string]*DashboardChart)[vs[1].(string)]
	}).(DashboardChartOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardChartInput)(nil)).Elem(), &DashboardChart{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardChartArrayInput)(nil)).Elem(), DashboardChartArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardChartMapInput)(nil)).Elem(), DashboardChartMap{})
	pulumi.RegisterOutputType(DashboardChartOutput{})
	pulumi.RegisterOutputType(DashboardChartArrayOutput{})
	pulumi.RegisterOutputType(DashboardChartMapOutput{})
}
