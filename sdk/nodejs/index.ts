// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AlertArgs, AlertState } from "./alert";
export type Alert = import("./alert").Alert;
export const Alert: typeof import("./alert").Alert = null as any;
utilities.lazyLoad(exports, ["Alert"], () => require("./alert"));

export { AssetArgs, AssetState } from "./asset";
export type Asset = import("./asset").Asset;
export const Asset: typeof import("./asset").Asset = null as any;
utilities.lazyLoad(exports, ["Asset"], () => require("./asset"));

export { AssetAttributeArgs, AssetAttributeState } from "./assetAttribute";
export type AssetAttribute = import("./assetAttribute").AssetAttribute;
export const AssetAttribute: typeof import("./assetAttribute").AssetAttribute = null as any;
utilities.lazyLoad(exports, ["AssetAttribute"], () => require("./assetAttribute"));

export { AssetMetadataArgs, AssetMetadataState } from "./assetMetadata";
export type AssetMetadata = import("./assetMetadata").AssetMetadata;
export const AssetMetadata: typeof import("./assetMetadata").AssetMetadata = null as any;
utilities.lazyLoad(exports, ["AssetMetadata"], () => require("./assetMetadata"));

export { ComponentArgs, ComponentState } from "./component";
export type Component = import("./component").Component;
export const Component: typeof import("./component").Component = null as any;
utilities.lazyLoad(exports, ["Component"], () => require("./component"));

export { ComponentRoutineArgs, ComponentRoutineState } from "./componentRoutine";
export type ComponentRoutine = import("./componentRoutine").ComponentRoutine;
export const ComponentRoutine: typeof import("./componentRoutine").ComponentRoutine = null as any;
utilities.lazyLoad(exports, ["ComponentRoutine"], () => require("./componentRoutine"));

export { DashboardArgs, DashboardState } from "./dashboard";
export type Dashboard = import("./dashboard").Dashboard;
export const Dashboard: typeof import("./dashboard").Dashboard = null as any;
utilities.lazyLoad(exports, ["Dashboard"], () => require("./dashboard"));

export { DashboardChartArgs, DashboardChartState } from "./dashboardChart";
export type DashboardChart = import("./dashboardChart").DashboardChart;
export const DashboardChart: typeof import("./dashboardChart").DashboardChart = null as any;
utilities.lazyLoad(exports, ["DashboardChart"], () => require("./dashboardChart"));

export { DashboardTabArgs, DashboardTabState } from "./dashboardTab";
export type DashboardTab = import("./dashboardTab").DashboardTab;
export const DashboardTab: typeof import("./dashboardTab").DashboardTab = null as any;
utilities.lazyLoad(exports, ["DashboardTab"], () => require("./dashboardTab"));

export { FileArgs, FileState } from "./file";
export type File = import("./file").File;
export const File: typeof import("./file").File = null as any;
utilities.lazyLoad(exports, ["File"], () => require("./file"));

export { FileFolderArgs, FileFolderState } from "./fileFolder";
export type FileFolder = import("./fileFolder").FileFolder;
export const FileFolder: typeof import("./fileFolder").FileFolder = null as any;
utilities.lazyLoad(exports, ["FileFolder"], () => require("./fileFolder"));

export { FunctionArgs, FunctionState } from "./function";
export type Function = import("./function").Function;
export const Function: typeof import("./function").Function = null as any;
utilities.lazyLoad(exports, ["Function"], () => require("./function"));

export { GetAssetKindsResult } from "./getAssetKinds";
export const getAssetKinds: typeof import("./getAssetKinds").getAssetKinds = null as any;
export const getAssetKindsOutput: typeof import("./getAssetKinds").getAssetKindsOutput = null as any;
utilities.lazyLoad(exports, ["getAssetKinds","getAssetKindsOutput"], () => require("./getAssetKinds"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { SecretArgs, SecretState } from "./secret";
export type Secret = import("./secret").Secret;
export const Secret: typeof import("./secret").Secret = null as any;
utilities.lazyLoad(exports, ["Secret"], () => require("./secret"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "splight:index/alert:Alert":
                return new Alert(name, <any>undefined, { urn })
            case "splight:index/asset:Asset":
                return new Asset(name, <any>undefined, { urn })
            case "splight:index/assetAttribute:AssetAttribute":
                return new AssetAttribute(name, <any>undefined, { urn })
            case "splight:index/assetMetadata:AssetMetadata":
                return new AssetMetadata(name, <any>undefined, { urn })
            case "splight:index/component:Component":
                return new Component(name, <any>undefined, { urn })
            case "splight:index/componentRoutine:ComponentRoutine":
                return new ComponentRoutine(name, <any>undefined, { urn })
            case "splight:index/dashboard:Dashboard":
                return new Dashboard(name, <any>undefined, { urn })
            case "splight:index/dashboardChart:DashboardChart":
                return new DashboardChart(name, <any>undefined, { urn })
            case "splight:index/dashboardTab:DashboardTab":
                return new DashboardTab(name, <any>undefined, { urn })
            case "splight:index/file:File":
                return new File(name, <any>undefined, { urn })
            case "splight:index/fileFolder:FileFolder":
                return new FileFolder(name, <any>undefined, { urn })
            case "splight:index/function:Function":
                return new Function(name, <any>undefined, { urn })
            case "splight:index/secret:Secret":
                return new Secret(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("splight", "index/alert", _module)
pulumi.runtime.registerResourceModule("splight", "index/asset", _module)
pulumi.runtime.registerResourceModule("splight", "index/assetAttribute", _module)
pulumi.runtime.registerResourceModule("splight", "index/assetMetadata", _module)
pulumi.runtime.registerResourceModule("splight", "index/component", _module)
pulumi.runtime.registerResourceModule("splight", "index/componentRoutine", _module)
pulumi.runtime.registerResourceModule("splight", "index/dashboard", _module)
pulumi.runtime.registerResourceModule("splight", "index/dashboardChart", _module)
pulumi.runtime.registerResourceModule("splight", "index/dashboardTab", _module)
pulumi.runtime.registerResourceModule("splight", "index/file", _module)
pulumi.runtime.registerResourceModule("splight", "index/fileFolder", _module)
pulumi.runtime.registerResourceModule("splight", "index/function", _module)
pulumi.runtime.registerResourceModule("splight", "index/secret", _module)
pulumi.runtime.registerResourcePackage("splight", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:splight") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
