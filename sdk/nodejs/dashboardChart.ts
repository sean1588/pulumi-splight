// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as splight from "@splightplatform/pulumi-splight";
 *
 * const dashboardChartTest = new splight.DashboardChart("dashboardChartTest", {
 *     type: "timeseries",
 *     tab: "1234-1234-1234-1234",
 *     timestampGte: "now - 6h",
 *     timestampLte: "now",
 *     chartItems: [
 *         {
 *             refId: "A",
 *             type: "QUERY",
 *             color: "red",
 *             expressionPlain: "",
 *             queryPlain: JSON.stringify([{
 *                 $match: {
 *                     asset: "1234-1234-1234-1234",
 *                     attribute: "1234-1234-1234-1234",
 *                 },
 *             }]),
 *         },
 *         {
 *             refId: "B",
 *             color: "blue",
 *             type: "QUERY",
 *             expressionPlain: "",
 *             queryPlain: JSON.stringify([{
 *                 $match: {
 *                     asset: "1234-1234-1234-1234",
 *                     attribute: "1234-1234-1234-1234",
 *                 },
 *             }]),
 *         },
 *     ],
 *     thresholds: [{
 *         color: "#00edcf",
 *         displayText: "T1Test",
 *         value: 13.1,
 *     }],
 *     valueMappings: [{
 *         displayText: "MODIFICADO",
 *         matchValue: "123.3",
 *         type: "exact_match",
 *         order: 0,
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import splight:index/dashboardChart:DashboardChart [options] splight_dashbaord_chart.<name> <dashboard_chart_id>
 * ```
 */
export class DashboardChart extends pulumi.CustomResource {
    /**
     * Get an existing DashboardChart resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DashboardChartState, opts?: pulumi.CustomResourceOptions): DashboardChart {
        return new DashboardChart(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'splight:index/dashboardChart:DashboardChart';

    /**
     * Returns true if the given object is an instance of DashboardChart.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DashboardChart {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DashboardChart.__pulumiType;
    }

    /**
     * chart traces to be included
     */
    public readonly chartItems!: pulumi.Output<outputs.DashboardChartChartItem[]>;
    /**
     * chart height in px
     */
    public readonly height!: pulumi.Output<number | undefined>;
    /**
     * name of the chart
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * id for the tab where to place the chart
     */
    public readonly tab!: pulumi.Output<string>;
    /**
     * optional static lines to be added to the chart as references
     */
    public readonly thresholds!: pulumi.Output<outputs.DashboardChartThreshold[] | undefined>;
    /**
     * date in isoformat or shortcut string where to end reading
     */
    public readonly timestampGte!: pulumi.Output<string>;
    /**
     * date in isoformat or shortcut string where to start reading
     */
    public readonly timestampLte!: pulumi.Output<string>;
    /**
     * [timeseries|bargauge|..] chart type
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * optional mappings to transform data with rules
     */
    public readonly valueMappings!: pulumi.Output<outputs.DashboardChartValueMapping[] | undefined>;
    /**
     * chart width in cols (max 20)
     */
    public readonly width!: pulumi.Output<number | undefined>;

    /**
     * Create a DashboardChart resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DashboardChartArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DashboardChartArgs | DashboardChartState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DashboardChartState | undefined;
            resourceInputs["chartItems"] = state ? state.chartItems : undefined;
            resourceInputs["height"] = state ? state.height : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["tab"] = state ? state.tab : undefined;
            resourceInputs["thresholds"] = state ? state.thresholds : undefined;
            resourceInputs["timestampGte"] = state ? state.timestampGte : undefined;
            resourceInputs["timestampLte"] = state ? state.timestampLte : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["valueMappings"] = state ? state.valueMappings : undefined;
            resourceInputs["width"] = state ? state.width : undefined;
        } else {
            const args = argsOrState as DashboardChartArgs | undefined;
            if ((!args || args.chartItems === undefined) && !opts.urn) {
                throw new Error("Missing required property 'chartItems'");
            }
            if ((!args || args.tab === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tab'");
            }
            if ((!args || args.timestampGte === undefined) && !opts.urn) {
                throw new Error("Missing required property 'timestampGte'");
            }
            if ((!args || args.timestampLte === undefined) && !opts.urn) {
                throw new Error("Missing required property 'timestampLte'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["chartItems"] = args ? args.chartItems : undefined;
            resourceInputs["height"] = args ? args.height : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["tab"] = args ? args.tab : undefined;
            resourceInputs["thresholds"] = args ? args.thresholds : undefined;
            resourceInputs["timestampGte"] = args ? args.timestampGte : undefined;
            resourceInputs["timestampLte"] = args ? args.timestampLte : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["valueMappings"] = args ? args.valueMappings : undefined;
            resourceInputs["width"] = args ? args.width : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DashboardChart.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DashboardChart resources.
 */
export interface DashboardChartState {
    /**
     * chart traces to be included
     */
    chartItems?: pulumi.Input<pulumi.Input<inputs.DashboardChartChartItem>[]>;
    /**
     * chart height in px
     */
    height?: pulumi.Input<number>;
    /**
     * name of the chart
     */
    name?: pulumi.Input<string>;
    /**
     * id for the tab where to place the chart
     */
    tab?: pulumi.Input<string>;
    /**
     * optional static lines to be added to the chart as references
     */
    thresholds?: pulumi.Input<pulumi.Input<inputs.DashboardChartThreshold>[]>;
    /**
     * date in isoformat or shortcut string where to end reading
     */
    timestampGte?: pulumi.Input<string>;
    /**
     * date in isoformat or shortcut string where to start reading
     */
    timestampLte?: pulumi.Input<string>;
    /**
     * [timeseries|bargauge|..] chart type
     */
    type?: pulumi.Input<string>;
    /**
     * optional mappings to transform data with rules
     */
    valueMappings?: pulumi.Input<pulumi.Input<inputs.DashboardChartValueMapping>[]>;
    /**
     * chart width in cols (max 20)
     */
    width?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a DashboardChart resource.
 */
export interface DashboardChartArgs {
    /**
     * chart traces to be included
     */
    chartItems: pulumi.Input<pulumi.Input<inputs.DashboardChartChartItem>[]>;
    /**
     * chart height in px
     */
    height?: pulumi.Input<number>;
    /**
     * name of the chart
     */
    name?: pulumi.Input<string>;
    /**
     * id for the tab where to place the chart
     */
    tab: pulumi.Input<string>;
    /**
     * optional static lines to be added to the chart as references
     */
    thresholds?: pulumi.Input<pulumi.Input<inputs.DashboardChartThreshold>[]>;
    /**
     * date in isoformat or shortcut string where to end reading
     */
    timestampGte: pulumi.Input<string>;
    /**
     * date in isoformat or shortcut string where to start reading
     */
    timestampLte: pulumi.Input<string>;
    /**
     * [timeseries|bargauge|..] chart type
     */
    type: pulumi.Input<string>;
    /**
     * optional mappings to transform data with rules
     */
    valueMappings?: pulumi.Input<pulumi.Input<inputs.DashboardChartValueMapping>[]>;
    /**
     * chart width in cols (max 20)
     */
    width?: pulumi.Input<number>;
}
