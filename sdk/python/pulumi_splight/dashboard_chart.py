# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DashboardChartArgs', 'DashboardChart']

@pulumi.input_type
class DashboardChartArgs:
    def __init__(__self__, *,
                 chart_items: pulumi.Input[Sequence[pulumi.Input['DashboardChartChartItemArgs']]],
                 tab: pulumi.Input[str],
                 timestamp_gte: pulumi.Input[str],
                 timestamp_lte: pulumi.Input[str],
                 type: pulumi.Input[str],
                 height: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 thresholds: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardChartThresholdArgs']]]] = None,
                 value_mappings: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardChartValueMappingArgs']]]] = None,
                 width: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a DashboardChart resource.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardChartChartItemArgs']]] chart_items: chart traces to be included
        :param pulumi.Input[str] tab: id for the tab where to place the chart
        :param pulumi.Input[str] timestamp_gte: date in isoformat or shortcut string where to end reading
        :param pulumi.Input[str] timestamp_lte: date in isoformat or shortcut string where to start reading
        :param pulumi.Input[str] type: [timeseries|bargauge|..] chart type
        :param pulumi.Input[int] height: chart height in px
        :param pulumi.Input[str] name: name of the chart
        :param pulumi.Input[Sequence[pulumi.Input['DashboardChartThresholdArgs']]] thresholds: optional static lines to be added to the chart as references
        :param pulumi.Input[Sequence[pulumi.Input['DashboardChartValueMappingArgs']]] value_mappings: optional mappings to transform data with rules
        :param pulumi.Input[int] width: chart width in cols (max 20)
        """
        pulumi.set(__self__, "chart_items", chart_items)
        pulumi.set(__self__, "tab", tab)
        pulumi.set(__self__, "timestamp_gte", timestamp_gte)
        pulumi.set(__self__, "timestamp_lte", timestamp_lte)
        pulumi.set(__self__, "type", type)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if thresholds is not None:
            pulumi.set(__self__, "thresholds", thresholds)
        if value_mappings is not None:
            pulumi.set(__self__, "value_mappings", value_mappings)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter(name="chartItems")
    def chart_items(self) -> pulumi.Input[Sequence[pulumi.Input['DashboardChartChartItemArgs']]]:
        """
        chart traces to be included
        """
        return pulumi.get(self, "chart_items")

    @chart_items.setter
    def chart_items(self, value: pulumi.Input[Sequence[pulumi.Input['DashboardChartChartItemArgs']]]):
        pulumi.set(self, "chart_items", value)

    @property
    @pulumi.getter
    def tab(self) -> pulumi.Input[str]:
        """
        id for the tab where to place the chart
        """
        return pulumi.get(self, "tab")

    @tab.setter
    def tab(self, value: pulumi.Input[str]):
        pulumi.set(self, "tab", value)

    @property
    @pulumi.getter(name="timestampGte")
    def timestamp_gte(self) -> pulumi.Input[str]:
        """
        date in isoformat or shortcut string where to end reading
        """
        return pulumi.get(self, "timestamp_gte")

    @timestamp_gte.setter
    def timestamp_gte(self, value: pulumi.Input[str]):
        pulumi.set(self, "timestamp_gte", value)

    @property
    @pulumi.getter(name="timestampLte")
    def timestamp_lte(self) -> pulumi.Input[str]:
        """
        date in isoformat or shortcut string where to start reading
        """
        return pulumi.get(self, "timestamp_lte")

    @timestamp_lte.setter
    def timestamp_lte(self, value: pulumi.Input[str]):
        pulumi.set(self, "timestamp_lte", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        [timeseries|bargauge|..] chart type
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[int]]:
        """
        chart height in px
        """
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the chart
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def thresholds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardChartThresholdArgs']]]]:
        """
        optional static lines to be added to the chart as references
        """
        return pulumi.get(self, "thresholds")

    @thresholds.setter
    def thresholds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardChartThresholdArgs']]]]):
        pulumi.set(self, "thresholds", value)

    @property
    @pulumi.getter(name="valueMappings")
    def value_mappings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardChartValueMappingArgs']]]]:
        """
        optional mappings to transform data with rules
        """
        return pulumi.get(self, "value_mappings")

    @value_mappings.setter
    def value_mappings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardChartValueMappingArgs']]]]):
        pulumi.set(self, "value_mappings", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[int]]:
        """
        chart width in cols (max 20)
        """
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "width", value)


@pulumi.input_type
class _DashboardChartState:
    def __init__(__self__, *,
                 chart_items: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardChartChartItemArgs']]]] = None,
                 height: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 tab: Optional[pulumi.Input[str]] = None,
                 thresholds: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardChartThresholdArgs']]]] = None,
                 timestamp_gte: Optional[pulumi.Input[str]] = None,
                 timestamp_lte: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value_mappings: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardChartValueMappingArgs']]]] = None,
                 width: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering DashboardChart resources.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardChartChartItemArgs']]] chart_items: chart traces to be included
        :param pulumi.Input[int] height: chart height in px
        :param pulumi.Input[str] name: name of the chart
        :param pulumi.Input[str] tab: id for the tab where to place the chart
        :param pulumi.Input[Sequence[pulumi.Input['DashboardChartThresholdArgs']]] thresholds: optional static lines to be added to the chart as references
        :param pulumi.Input[str] timestamp_gte: date in isoformat or shortcut string where to end reading
        :param pulumi.Input[str] timestamp_lte: date in isoformat or shortcut string where to start reading
        :param pulumi.Input[str] type: [timeseries|bargauge|..] chart type
        :param pulumi.Input[Sequence[pulumi.Input['DashboardChartValueMappingArgs']]] value_mappings: optional mappings to transform data with rules
        :param pulumi.Input[int] width: chart width in cols (max 20)
        """
        if chart_items is not None:
            pulumi.set(__self__, "chart_items", chart_items)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tab is not None:
            pulumi.set(__self__, "tab", tab)
        if thresholds is not None:
            pulumi.set(__self__, "thresholds", thresholds)
        if timestamp_gte is not None:
            pulumi.set(__self__, "timestamp_gte", timestamp_gte)
        if timestamp_lte is not None:
            pulumi.set(__self__, "timestamp_lte", timestamp_lte)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value_mappings is not None:
            pulumi.set(__self__, "value_mappings", value_mappings)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter(name="chartItems")
    def chart_items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardChartChartItemArgs']]]]:
        """
        chart traces to be included
        """
        return pulumi.get(self, "chart_items")

    @chart_items.setter
    def chart_items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardChartChartItemArgs']]]]):
        pulumi.set(self, "chart_items", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[int]]:
        """
        chart height in px
        """
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the chart
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def tab(self) -> Optional[pulumi.Input[str]]:
        """
        id for the tab where to place the chart
        """
        return pulumi.get(self, "tab")

    @tab.setter
    def tab(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tab", value)

    @property
    @pulumi.getter
    def thresholds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardChartThresholdArgs']]]]:
        """
        optional static lines to be added to the chart as references
        """
        return pulumi.get(self, "thresholds")

    @thresholds.setter
    def thresholds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardChartThresholdArgs']]]]):
        pulumi.set(self, "thresholds", value)

    @property
    @pulumi.getter(name="timestampGte")
    def timestamp_gte(self) -> Optional[pulumi.Input[str]]:
        """
        date in isoformat or shortcut string where to end reading
        """
        return pulumi.get(self, "timestamp_gte")

    @timestamp_gte.setter
    def timestamp_gte(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timestamp_gte", value)

    @property
    @pulumi.getter(name="timestampLte")
    def timestamp_lte(self) -> Optional[pulumi.Input[str]]:
        """
        date in isoformat or shortcut string where to start reading
        """
        return pulumi.get(self, "timestamp_lte")

    @timestamp_lte.setter
    def timestamp_lte(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timestamp_lte", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        [timeseries|bargauge|..] chart type
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="valueMappings")
    def value_mappings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardChartValueMappingArgs']]]]:
        """
        optional mappings to transform data with rules
        """
        return pulumi.get(self, "value_mappings")

    @value_mappings.setter
    def value_mappings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardChartValueMappingArgs']]]]):
        pulumi.set(self, "value_mappings", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[int]]:
        """
        chart width in cols (max 20)
        """
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "width", value)


class DashboardChart(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 chart_items: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DashboardChartChartItemArgs']]]]] = None,
                 height: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 tab: Optional[pulumi.Input[str]] = None,
                 thresholds: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DashboardChartThresholdArgs']]]]] = None,
                 timestamp_gte: Optional[pulumi.Input[str]] = None,
                 timestamp_lte: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value_mappings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DashboardChartValueMappingArgs']]]]] = None,
                 width: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        ## Example Usage

        ```python
        import pulumi
        import json
        import pulumi_splight as splight

        dashboard_chart_test = splight.DashboardChart("dashboardChartTest",
            type="timeseries",
            tab="1234-1234-1234-1234",
            timestamp_gte="now - 6h",
            timestamp_lte="now",
            chart_items=[
                splight.DashboardChartChartItemArgs(
                    ref_id="A",
                    type="QUERY",
                    color="red",
                    expression_plain="",
                    query_plain=json.dumps([{
                        "$match": {
                            "asset": "1234-1234-1234-1234",
                            "attribute": "1234-1234-1234-1234",
                        },
                    }]),
                ),
                splight.DashboardChartChartItemArgs(
                    ref_id="B",
                    color="blue",
                    type="QUERY",
                    expression_plain="",
                    query_plain=json.dumps([{
                        "$match": {
                            "asset": "1234-1234-1234-1234",
                            "attribute": "1234-1234-1234-1234",
                        },
                    }]),
                ),
            ],
            thresholds=[splight.DashboardChartThresholdArgs(
                color="#00edcf",
                display_text="T1Test",
                value=13.1,
            )],
            value_mappings=[splight.DashboardChartValueMappingArgs(
                display_text="MODIFICADO",
                match_value="123.3",
                type="exact_match",
                order=0,
            )])
        ```

        ## Import

        ```sh
        $ pulumi import splight:index/dashboardChart:DashboardChart [options] splight_dashbaord_chart.<name> <dashboard_chart_id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DashboardChartChartItemArgs']]]] chart_items: chart traces to be included
        :param pulumi.Input[int] height: chart height in px
        :param pulumi.Input[str] name: name of the chart
        :param pulumi.Input[str] tab: id for the tab where to place the chart
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DashboardChartThresholdArgs']]]] thresholds: optional static lines to be added to the chart as references
        :param pulumi.Input[str] timestamp_gte: date in isoformat or shortcut string where to end reading
        :param pulumi.Input[str] timestamp_lte: date in isoformat or shortcut string where to start reading
        :param pulumi.Input[str] type: [timeseries|bargauge|..] chart type
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DashboardChartValueMappingArgs']]]] value_mappings: optional mappings to transform data with rules
        :param pulumi.Input[int] width: chart width in cols (max 20)
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DashboardChartArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        ```python
        import pulumi
        import json
        import pulumi_splight as splight

        dashboard_chart_test = splight.DashboardChart("dashboardChartTest",
            type="timeseries",
            tab="1234-1234-1234-1234",
            timestamp_gte="now - 6h",
            timestamp_lte="now",
            chart_items=[
                splight.DashboardChartChartItemArgs(
                    ref_id="A",
                    type="QUERY",
                    color="red",
                    expression_plain="",
                    query_plain=json.dumps([{
                        "$match": {
                            "asset": "1234-1234-1234-1234",
                            "attribute": "1234-1234-1234-1234",
                        },
                    }]),
                ),
                splight.DashboardChartChartItemArgs(
                    ref_id="B",
                    color="blue",
                    type="QUERY",
                    expression_plain="",
                    query_plain=json.dumps([{
                        "$match": {
                            "asset": "1234-1234-1234-1234",
                            "attribute": "1234-1234-1234-1234",
                        },
                    }]),
                ),
            ],
            thresholds=[splight.DashboardChartThresholdArgs(
                color="#00edcf",
                display_text="T1Test",
                value=13.1,
            )],
            value_mappings=[splight.DashboardChartValueMappingArgs(
                display_text="MODIFICADO",
                match_value="123.3",
                type="exact_match",
                order=0,
            )])
        ```

        ## Import

        ```sh
        $ pulumi import splight:index/dashboardChart:DashboardChart [options] splight_dashbaord_chart.<name> <dashboard_chart_id>
        ```

        :param str resource_name: The name of the resource.
        :param DashboardChartArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DashboardChartArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 chart_items: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DashboardChartChartItemArgs']]]]] = None,
                 height: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 tab: Optional[pulumi.Input[str]] = None,
                 thresholds: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DashboardChartThresholdArgs']]]]] = None,
                 timestamp_gte: Optional[pulumi.Input[str]] = None,
                 timestamp_lte: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value_mappings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DashboardChartValueMappingArgs']]]]] = None,
                 width: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DashboardChartArgs.__new__(DashboardChartArgs)

            if chart_items is None and not opts.urn:
                raise TypeError("Missing required property 'chart_items'")
            __props__.__dict__["chart_items"] = chart_items
            __props__.__dict__["height"] = height
            __props__.__dict__["name"] = name
            if tab is None and not opts.urn:
                raise TypeError("Missing required property 'tab'")
            __props__.__dict__["tab"] = tab
            __props__.__dict__["thresholds"] = thresholds
            if timestamp_gte is None and not opts.urn:
                raise TypeError("Missing required property 'timestamp_gte'")
            __props__.__dict__["timestamp_gte"] = timestamp_gte
            if timestamp_lte is None and not opts.urn:
                raise TypeError("Missing required property 'timestamp_lte'")
            __props__.__dict__["timestamp_lte"] = timestamp_lte
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["value_mappings"] = value_mappings
            __props__.__dict__["width"] = width
        super(DashboardChart, __self__).__init__(
            'splight:index/dashboardChart:DashboardChart',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            chart_items: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DashboardChartChartItemArgs']]]]] = None,
            height: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            tab: Optional[pulumi.Input[str]] = None,
            thresholds: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DashboardChartThresholdArgs']]]]] = None,
            timestamp_gte: Optional[pulumi.Input[str]] = None,
            timestamp_lte: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None,
            value_mappings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DashboardChartValueMappingArgs']]]]] = None,
            width: Optional[pulumi.Input[int]] = None) -> 'DashboardChart':
        """
        Get an existing DashboardChart resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DashboardChartChartItemArgs']]]] chart_items: chart traces to be included
        :param pulumi.Input[int] height: chart height in px
        :param pulumi.Input[str] name: name of the chart
        :param pulumi.Input[str] tab: id for the tab where to place the chart
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DashboardChartThresholdArgs']]]] thresholds: optional static lines to be added to the chart as references
        :param pulumi.Input[str] timestamp_gte: date in isoformat or shortcut string where to end reading
        :param pulumi.Input[str] timestamp_lte: date in isoformat or shortcut string where to start reading
        :param pulumi.Input[str] type: [timeseries|bargauge|..] chart type
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DashboardChartValueMappingArgs']]]] value_mappings: optional mappings to transform data with rules
        :param pulumi.Input[int] width: chart width in cols (max 20)
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DashboardChartState.__new__(_DashboardChartState)

        __props__.__dict__["chart_items"] = chart_items
        __props__.__dict__["height"] = height
        __props__.__dict__["name"] = name
        __props__.__dict__["tab"] = tab
        __props__.__dict__["thresholds"] = thresholds
        __props__.__dict__["timestamp_gte"] = timestamp_gte
        __props__.__dict__["timestamp_lte"] = timestamp_lte
        __props__.__dict__["type"] = type
        __props__.__dict__["value_mappings"] = value_mappings
        __props__.__dict__["width"] = width
        return DashboardChart(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="chartItems")
    def chart_items(self) -> pulumi.Output[Sequence['outputs.DashboardChartChartItem']]:
        """
        chart traces to be included
        """
        return pulumi.get(self, "chart_items")

    @property
    @pulumi.getter
    def height(self) -> pulumi.Output[Optional[int]]:
        """
        chart height in px
        """
        return pulumi.get(self, "height")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        name of the chart
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def tab(self) -> pulumi.Output[str]:
        """
        id for the tab where to place the chart
        """
        return pulumi.get(self, "tab")

    @property
    @pulumi.getter
    def thresholds(self) -> pulumi.Output[Optional[Sequence['outputs.DashboardChartThreshold']]]:
        """
        optional static lines to be added to the chart as references
        """
        return pulumi.get(self, "thresholds")

    @property
    @pulumi.getter(name="timestampGte")
    def timestamp_gte(self) -> pulumi.Output[str]:
        """
        date in isoformat or shortcut string where to end reading
        """
        return pulumi.get(self, "timestamp_gte")

    @property
    @pulumi.getter(name="timestampLte")
    def timestamp_lte(self) -> pulumi.Output[str]:
        """
        date in isoformat or shortcut string where to start reading
        """
        return pulumi.get(self, "timestamp_lte")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        [timeseries|bargauge|..] chart type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="valueMappings")
    def value_mappings(self) -> pulumi.Output[Optional[Sequence['outputs.DashboardChartValueMapping']]]:
        """
        optional mappings to transform data with rules
        """
        return pulumi.get(self, "value_mappings")

    @property
    @pulumi.getter
    def width(self) -> pulumi.Output[Optional[int]]:
        """
        chart width in cols (max 20)
        """
        return pulumi.get(self, "width")

