// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Splight.Splight
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Splight = Splight.Splight;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var dashboardChartTest = new Splight.DashboardChart("dashboardChartTest", new()
    ///     {
    ///         Type = "timeseries",
    ///         Tab = "1234-1234-1234-1234",
    ///         TimestampGte = "now - 6h",
    ///         TimestampLte = "now",
    ///         ChartItems = new[]
    ///         {
    ///             new Splight.Inputs.DashboardChartChartItemArgs
    ///             {
    ///                 RefId = "A",
    ///                 Type = "QUERY",
    ///                 Color = "red",
    ///                 ExpressionPlain = "",
    ///                 QueryPlain = JsonSerializer.Serialize(new[]
    ///                 {
    ///                     new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["$match"] = new Dictionary&lt;string, object?&gt;
    ///                         {
    ///                             ["asset"] = "1234-1234-1234-1234",
    ///                             ["attribute"] = "1234-1234-1234-1234",
    ///                         },
    ///                     },
    ///                 }),
    ///             },
    ///             new Splight.Inputs.DashboardChartChartItemArgs
    ///             {
    ///                 RefId = "B",
    ///                 Color = "blue",
    ///                 Type = "QUERY",
    ///                 ExpressionPlain = "",
    ///                 QueryPlain = JsonSerializer.Serialize(new[]
    ///                 {
    ///                     new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["$match"] = new Dictionary&lt;string, object?&gt;
    ///                         {
    ///                             ["asset"] = "1234-1234-1234-1234",
    ///                             ["attribute"] = "1234-1234-1234-1234",
    ///                         },
    ///                     },
    ///                 }),
    ///             },
    ///         },
    ///         Thresholds = new[]
    ///         {
    ///             new Splight.Inputs.DashboardChartThresholdArgs
    ///             {
    ///                 Color = "#00edcf",
    ///                 DisplayText = "T1Test",
    ///                 Value = 13.1,
    ///             },
    ///         },
    ///         ValueMappings = new[]
    ///         {
    ///             new Splight.Inputs.DashboardChartValueMappingArgs
    ///             {
    ///                 DisplayText = "MODIFICADO",
    ///                 MatchValue = "123.3",
    ///                 Type = "exact_match",
    ///                 Order = 0,
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import splight:index/dashboardChart:DashboardChart [options] splight_dashbaord_chart.&lt;name&gt; &lt;dashboard_chart_id&gt;
    /// ```
    /// </summary>
    [SplightResourceType("splight:index/dashboardChart:DashboardChart")]
    public partial class DashboardChart : global::Pulumi.CustomResource
    {
        /// <summary>
        /// chart traces to be included
        /// </summary>
        [Output("chartItems")]
        public Output<ImmutableArray<Outputs.DashboardChartChartItem>> ChartItems { get; private set; } = null!;

        [Output("collection")]
        public Output<string?> Collection { get; private set; } = null!;

        /// <summary>
        /// chart height in px
        /// </summary>
        [Output("height")]
        public Output<int?> Height { get; private set; } = null!;

        /// <summary>
        /// name of the chart
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// id for the tab where to place the chart
        /// </summary>
        [Output("tab")]
        public Output<string> Tab { get; private set; } = null!;

        /// <summary>
        /// optional static lines to be added to the chart as references
        /// </summary>
        [Output("thresholds")]
        public Output<ImmutableArray<Outputs.DashboardChartThreshold>> Thresholds { get; private set; } = null!;

        /// <summary>
        /// date in isoformat or shortcut string where to end reading
        /// </summary>
        [Output("timestampGte")]
        public Output<string> TimestampGte { get; private set; } = null!;

        /// <summary>
        /// date in isoformat or shortcut string where to start reading
        /// </summary>
        [Output("timestampLte")]
        public Output<string> TimestampLte { get; private set; } = null!;

        /// <summary>
        /// [timeseries|bargauge|..] chart type
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// optional mappings to transform data with rules
        /// </summary>
        [Output("valueMappings")]
        public Output<ImmutableArray<Outputs.DashboardChartValueMapping>> ValueMappings { get; private set; } = null!;

        /// <summary>
        /// chart width in cols (max 20)
        /// </summary>
        [Output("width")]
        public Output<int?> Width { get; private set; } = null!;


        /// <summary>
        /// Create a DashboardChart resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DashboardChart(string name, DashboardChartArgs args, CustomResourceOptions? options = null)
            : base("splight:index/dashboardChart:DashboardChart", name, args ?? new DashboardChartArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DashboardChart(string name, Input<string> id, DashboardChartState? state = null, CustomResourceOptions? options = null)
            : base("splight:index/dashboardChart:DashboardChart", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DashboardChart resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DashboardChart Get(string name, Input<string> id, DashboardChartState? state = null, CustomResourceOptions? options = null)
        {
            return new DashboardChart(name, id, state, options);
        }
    }

    public sealed class DashboardChartArgs : global::Pulumi.ResourceArgs
    {
        [Input("chartItems", required: true)]
        private InputList<Inputs.DashboardChartChartItemArgs>? _chartItems;

        /// <summary>
        /// chart traces to be included
        /// </summary>
        public InputList<Inputs.DashboardChartChartItemArgs> ChartItems
        {
            get => _chartItems ?? (_chartItems = new InputList<Inputs.DashboardChartChartItemArgs>());
            set => _chartItems = value;
        }

        [Input("collection")]
        public Input<string>? Collection { get; set; }

        /// <summary>
        /// chart height in px
        /// </summary>
        [Input("height")]
        public Input<int>? Height { get; set; }

        /// <summary>
        /// name of the chart
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// id for the tab where to place the chart
        /// </summary>
        [Input("tab", required: true)]
        public Input<string> Tab { get; set; } = null!;

        [Input("thresholds")]
        private InputList<Inputs.DashboardChartThresholdArgs>? _thresholds;

        /// <summary>
        /// optional static lines to be added to the chart as references
        /// </summary>
        public InputList<Inputs.DashboardChartThresholdArgs> Thresholds
        {
            get => _thresholds ?? (_thresholds = new InputList<Inputs.DashboardChartThresholdArgs>());
            set => _thresholds = value;
        }

        /// <summary>
        /// date in isoformat or shortcut string where to end reading
        /// </summary>
        [Input("timestampGte", required: true)]
        public Input<string> TimestampGte { get; set; } = null!;

        /// <summary>
        /// date in isoformat or shortcut string where to start reading
        /// </summary>
        [Input("timestampLte", required: true)]
        public Input<string> TimestampLte { get; set; } = null!;

        /// <summary>
        /// [timeseries|bargauge|..] chart type
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        [Input("valueMappings")]
        private InputList<Inputs.DashboardChartValueMappingArgs>? _valueMappings;

        /// <summary>
        /// optional mappings to transform data with rules
        /// </summary>
        public InputList<Inputs.DashboardChartValueMappingArgs> ValueMappings
        {
            get => _valueMappings ?? (_valueMappings = new InputList<Inputs.DashboardChartValueMappingArgs>());
            set => _valueMappings = value;
        }

        /// <summary>
        /// chart width in cols (max 20)
        /// </summary>
        [Input("width")]
        public Input<int>? Width { get; set; }

        public DashboardChartArgs()
        {
        }
        public static new DashboardChartArgs Empty => new DashboardChartArgs();
    }

    public sealed class DashboardChartState : global::Pulumi.ResourceArgs
    {
        [Input("chartItems")]
        private InputList<Inputs.DashboardChartChartItemGetArgs>? _chartItems;

        /// <summary>
        /// chart traces to be included
        /// </summary>
        public InputList<Inputs.DashboardChartChartItemGetArgs> ChartItems
        {
            get => _chartItems ?? (_chartItems = new InputList<Inputs.DashboardChartChartItemGetArgs>());
            set => _chartItems = value;
        }

        [Input("collection")]
        public Input<string>? Collection { get; set; }

        /// <summary>
        /// chart height in px
        /// </summary>
        [Input("height")]
        public Input<int>? Height { get; set; }

        /// <summary>
        /// name of the chart
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// id for the tab where to place the chart
        /// </summary>
        [Input("tab")]
        public Input<string>? Tab { get; set; }

        [Input("thresholds")]
        private InputList<Inputs.DashboardChartThresholdGetArgs>? _thresholds;

        /// <summary>
        /// optional static lines to be added to the chart as references
        /// </summary>
        public InputList<Inputs.DashboardChartThresholdGetArgs> Thresholds
        {
            get => _thresholds ?? (_thresholds = new InputList<Inputs.DashboardChartThresholdGetArgs>());
            set => _thresholds = value;
        }

        /// <summary>
        /// date in isoformat or shortcut string where to end reading
        /// </summary>
        [Input("timestampGte")]
        public Input<string>? TimestampGte { get; set; }

        /// <summary>
        /// date in isoformat or shortcut string where to start reading
        /// </summary>
        [Input("timestampLte")]
        public Input<string>? TimestampLte { get; set; }

        /// <summary>
        /// [timeseries|bargauge|..] chart type
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        [Input("valueMappings")]
        private InputList<Inputs.DashboardChartValueMappingGetArgs>? _valueMappings;

        /// <summary>
        /// optional mappings to transform data with rules
        /// </summary>
        public InputList<Inputs.DashboardChartValueMappingGetArgs> ValueMappings
        {
            get => _valueMappings ?? (_valueMappings = new InputList<Inputs.DashboardChartValueMappingGetArgs>());
            set => _valueMappings = value;
        }

        /// <summary>
        /// chart width in cols (max 20)
        /// </summary>
        [Input("width")]
        public Input<int>? Width { get; set; }

        public DashboardChartState()
        {
        }
        public static new DashboardChartState Empty => new DashboardChartState();
    }
}
