{
    "name": "splight",
    "displayName": "splight",
    "description": "A Pulumi package for creating and managing splight cloud resources.",
    "keywords": [
        "splight",
        "splight",
        "category/cloud"
    ],
    "homepage": "https://www.splight-ai.com",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`splight` Terraform Provider](https://github.com/splightplatform/terraform-provider-splight).",
    "repository": "https://github.com/splightplatform/pulumi-splight",
    "publisher": "splight",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "compatibility": "tfbridge20"
        },
        "go": {
            "importBasePath": "github.com/splightplatform/pulumi-splight/sdk/go/splight",
            "generateResourceContainerTypes": true,
            "generateExtraInputTypes": true
        },
        "nodejs": {
            "packageDescription": "A Pulumi package for creating and managing splight cloud resources.",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/splightplatform/terraform-provider-splight)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-splight` repo](https://github.com/splightplatform/pulumi-splight/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-splight` repo](https://github.com/splightplatform/terraform-provider-splight/issues).",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "compatibility": "tfbridge20",
            "disableUnionOutputTypes": true
        },
        "python": {
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            },
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/splightplatform/terraform-provider-splight)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-splight` repo](https://github.com/splightplatform/pulumi-splight/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-splight` repo](https://github.com/splightplatform/terraform-provider-splight/issues).",
            "compatibility": "tfbridge20",
            "pyproject": {}
        }
    },
    "config": {
        "variables": {
            "hostname": {
                "type": "string"
            },
            "token": {
                "type": "string"
            }
        }
    },
    "types": {
        "splight:index/AlertAlertItem:AlertAlertItem": {
            "properties": {
                "expressionPlain": {
                    "type": "string"
                },
                "queryPlain": {
                    "type": "string"
                },
                "refId": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "expressionPlain",
                "queryPlain",
                "refId",
                "type"
            ]
        },
        "splight:index/AlertThreshold:AlertThreshold": {
            "properties": {
                "status": {
                    "type": "string",
                    "description": "[alert|warning|no_alert] status value for the threshold\n"
                },
                "statusText": {
                    "type": "string",
                    "description": "optional custom value to be displayed in the platform.\n"
                },
                "value": {
                    "type": "number",
                    "description": "value to be considered to compare\n"
                }
            },
            "type": "object",
            "required": [
                "status",
                "value"
            ]
        },
        "splight:index/AssetKind:AssetKind": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of this resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "splight:index/ComponentInput:ComponentInput": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "multiple": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "required": {
                    "type": "boolean"
                },
                "sensitive": {
                    "type": "boolean"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "description",
                "multiple",
                "name",
                "required",
                "sensitive",
                "type",
                "value"
            ]
        },
        "splight:index/ComponentRoutineConfig:ComponentRoutineConfig": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "multiple": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "required": {
                    "type": "boolean"
                },
                "sensitive": {
                    "type": "boolean"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "description",
                "multiple",
                "name",
                "required",
                "sensitive",
                "type",
                "value"
            ]
        },
        "splight:index/ComponentRoutineInput:ComponentRoutineInput": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "multiple": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "required": {
                    "type": "boolean"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/types/splight:index/ComponentRoutineInputValue:ComponentRoutineInputValue"
                },
                "valueType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "description",
                "multiple",
                "name",
                "required",
                "type",
                "value",
                "valueType"
            ]
        },
        "splight:index/ComponentRoutineInputValue:ComponentRoutineInputValue": {
            "properties": {
                "asset": {
                    "type": "string"
                },
                "attribute": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "asset",
                "attribute"
            ]
        },
        "splight:index/ComponentRoutineOutput:ComponentRoutineOutput": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "multiple": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "required": {
                    "type": "boolean"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/types/splight:index/ComponentRoutineOutputValue:ComponentRoutineOutputValue"
                },
                "valueType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "description",
                "multiple",
                "name",
                "required",
                "type",
                "value",
                "valueType"
            ]
        },
        "splight:index/ComponentRoutineOutputValue:ComponentRoutineOutputValue": {
            "properties": {
                "asset": {
                    "type": "string"
                },
                "attribute": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "asset",
                "attribute"
            ]
        },
        "splight:index/DashboardChartChartItem:DashboardChartChartItem": {
            "properties": {
                "color": {
                    "type": "string"
                },
                "expressionPlain": {
                    "type": "string"
                },
                "queryPlain": {
                    "type": "string"
                },
                "refId": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "color",
                "expressionPlain",
                "queryPlain",
                "refId",
                "type"
            ]
        },
        "splight:index/DashboardChartThreshold:DashboardChartThreshold": {
            "properties": {
                "color": {
                    "type": "string"
                },
                "displayText": {
                    "type": "string"
                },
                "value": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "color",
                "displayText",
                "value"
            ]
        },
        "splight:index/DashboardChartValueMapping:DashboardChartValueMapping": {
            "properties": {
                "displayText": {
                    "type": "string"
                },
                "matchValue": {
                    "type": "string"
                },
                "order": {
                    "type": "integer"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "displayText",
                "matchValue",
                "order",
                "type"
            ]
        },
        "splight:index/FunctionFunctionItem:FunctionFunctionItem": {
            "properties": {
                "expressionPlain": {
                    "type": "string"
                },
                "queryPlain": {
                    "type": "string"
                },
                "refId": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "expressionPlain",
                "queryPlain",
                "refId",
                "type"
            ]
        },
        "splight:index/getAssetKindsKind:getAssetKindsKind": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the splight package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "hostname": {
                "type": "string"
            },
            "token": {
                "type": "string"
            }
        },
        "inputProperties": {
            "hostname": {
                "type": "string"
            },
            "token": {
                "type": "string"
            }
        }
    },
    "resources": {
        "splight:index/alert:Alert": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as spl from \"@pulumi/spl\";\n\nconst alertTest = new spl.index.Spl_alert(\"alertTest\", {\n    name: \"AlertTest\",\n    description: \"Created with Terraform\",\n    type: \"rate\",\n    timeWindow: 600,\n    rateValue: 10,\n    rateUnit: \"minute\",\n    targetVariable: \"A\",\n    operator: \"gt\",\n    aggregation: \"avg\",\n    severity: \"sev8\",\n    thresholds: [{\n        value: 4,\n        status: \"no_alert\",\n        statusText: \"CustomStatusText\",\n    }],\n    alertItems: [\n        {\n            refId: \"A\",\n            type: \"QUERY\",\n            expressionPlain: \"\",\n            queryPlain: JSON.stringify([{\n                $match: {\n                    asset: \"1234-1234-1234-1234\",\n                    attribute: \"1234-1234-1234-1234\",\n                },\n            }]),\n        },\n        {\n            refId: \"B\",\n            type: \"QUERY\",\n            expressionPlain: \"\",\n            queryPlain: JSON.stringify([{\n                $match: {\n                    asset: \"1234-1234-1234-1234\",\n                    attribute: \"1234-1234-1234-1234\",\n                },\n            }]),\n        },\n    ],\n    relatedAssets: [\"1234-1234-1234-1234\"],\n});\n```\n```python\nimport pulumi\nimport json\nimport pulumi_spl as spl\n\nalert_test = spl.index.Spl_alert(\"alertTest\",\n    name=AlertTest,\n    description=Created with Terraform,\n    type=rate,\n    time_window=600,\n    rate_value=10,\n    rate_unit=minute,\n    target_variable=A,\n    operator=gt,\n    aggregation=avg,\n    severity=sev8,\n    thresholds=[{\n        value: 4,\n        status: no_alert,\n        statusText: CustomStatusText,\n    }],\n    alert_items=[\n        {\n            refId: A,\n            type: QUERY,\n            expressionPlain: ,\n            queryPlain: json.dumps([{\n                $match: {\n                    asset: 1234-1234-1234-1234,\n                    attribute: 1234-1234-1234-1234,\n                },\n            }]),\n        },\n        {\n            refId: B,\n            type: QUERY,\n            expressionPlain: ,\n            queryPlain: json.dumps([{\n                $match: {\n                    asset: 1234-1234-1234-1234,\n                    attribute: 1234-1234-1234-1234,\n                },\n            }]),\n        },\n    ],\n    related_assets=[1234-1234-1234-1234])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.Json;\nusing Pulumi;\nusing Spl = Pulumi.Spl;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var alertTest = new Spl.Index.Spl_alert(\"alertTest\", new()\n    {\n        Name = \"AlertTest\",\n        Description = \"Created with Terraform\",\n        Type = \"rate\",\n        TimeWindow = 600,\n        RateValue = 10,\n        RateUnit = \"minute\",\n        TargetVariable = \"A\",\n        Operator = \"gt\",\n        Aggregation = \"avg\",\n        Severity = \"sev8\",\n        Thresholds = new[]\n        {\n            \n            {\n                { \"value\", 4 },\n                { \"status\", \"no_alert\" },\n                { \"statusText\", \"CustomStatusText\" },\n            },\n        },\n        AlertItems = new[]\n        {\n            \n            {\n                { \"refId\", \"A\" },\n                { \"type\", \"QUERY\" },\n                { \"expressionPlain\", \"\" },\n                { \"queryPlain\", JsonSerializer.Serialize(new[]\n                {\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"$match\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"asset\"] = \"1234-1234-1234-1234\",\n                            [\"attribute\"] = \"1234-1234-1234-1234\",\n                        },\n                    },\n                }) },\n            },\n            \n            {\n                { \"refId\", \"B\" },\n                { \"type\", \"QUERY\" },\n                { \"expressionPlain\", \"\" },\n                { \"queryPlain\", JsonSerializer.Serialize(new[]\n                {\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"$match\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"asset\"] = \"1234-1234-1234-1234\",\n                            [\"attribute\"] = \"1234-1234-1234-1234\",\n                        },\n                    },\n                }) },\n            },\n        },\n        RelatedAssets = new[]\n        {\n            \"1234-1234-1234-1234\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/pulumi/pulumi-spl/sdk/v1/go/spl\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\nfunc main() {\npulumi.Run(func(ctx *pulumi.Context) error {\n_, err := index.NewSpl_alert(ctx, \"alertTest\", \u0026index.Spl_alertArgs{\nName: \"AlertTest\",\nDescription: \"Created with Terraform\",\nType: \"rate\",\nTimeWindow: 600,\nRateValue: 10,\nRateUnit: \"minute\",\nTargetVariable: \"A\",\nOperator: \"gt\",\nAggregation: \"avg\",\nSeverity: \"sev8\",\nThresholds: []map[string]interface{}{\nmap[string]interface{}{\n\"value\": 4,\n\"status\": \"no_alert\",\n\"statusText\": \"CustomStatusText\",\n},\n},\nAlertItems: tmpJSON0, err := json.Marshal([]map[string]interface{}{\nmap[string]interface{}{\n\"$match\": map[string]interface{}{\n\"asset\": \"1234-1234-1234-1234\",\n\"attribute\": \"1234-1234-1234-1234\",\n},\n},\n})\nif err != nil {\nreturn err\n}\njson0 := string(tmpJSON0)\ntmpJSON1, err := json.Marshal([]map[string]interface{}{\nmap[string]interface{}{\n\"$match\": map[string]interface{}{\n\"asset\": \"1234-1234-1234-1234\",\n\"attribute\": \"1234-1234-1234-1234\",\n},\n},\n})\nif err != nil {\nreturn err\n}\njson1 := string(tmpJSON1)\n[]map[string]interface{}{\nmap[string]interface{}{\n\"refId\": \"A\",\n\"type\": \"QUERY\",\n\"expressionPlain\": \"\",\n\"queryPlain\": json0,\n},\nmap[string]interface{}{\n\"refId\": \"B\",\n\"type\": \"QUERY\",\n\"expressionPlain\": \"\",\n\"queryPlain\": json1,\n},\n},\nRelatedAssets: []string{\n\"1234-1234-1234-1234\",\n},\n})\nif err != nil {\nreturn err\n}\nreturn nil\n})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.spl.spl_alert;\nimport com.pulumi.spl.Spl_alertArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var alertTest = new Spl_alert(\"alertTest\", Spl_alertArgs.builder()        \n            .name(\"AlertTest\")\n            .description(\"Created with Terraform\")\n            .type(\"rate\")\n            .timeWindow(600)\n            .rateValue(10)\n            .rateUnit(\"minute\")\n            .targetVariable(\"A\")\n            .operator(\"gt\")\n            .aggregation(\"avg\")\n            .severity(\"sev8\")\n            .thresholds(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n            .alertItems(            \n                %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference),\n                %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n            .relatedAssets(\"1234-1234-1234-1234\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  alertTest:\n    type: spl:spl_alert\n    properties:\n      name: AlertTest\n      description: Created with Terraform\n      type: rate\n      timeWindow: 600\n      rateValue: 10\n      rateUnit: minute\n      targetVariable: A\n      operator: gt\n      aggregation: avg\n      severity: sev8\n      thresholds:\n        - value: 4\n          status: no_alert\n          statusText: CustomStatusText\n      alertItems:\n        - refId: A\n          type: QUERY\n          expressionPlain:\n          queryPlain:\n            fn::toJSON:\n              - $match:\n                  asset: 1234-1234-1234-1234\n                  attribute: 1234-1234-1234-1234\n        - refId: B\n          type: QUERY\n          expressionPlain:\n          queryPlain:\n            fn::toJSON:\n              - $match:\n                  asset: 1234-1234-1234-1234\n                  attribute: 1234-1234-1234-1234\n      relatedAssets:\n        - 1234-1234-1234-1234\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import splight:index/alert:Alert [options] spl_alert.\u003cname\u003e \u003calert_id\u003e\n```\n\n",
            "properties": {
                "aggregation": {
                    "type": "string",
                    "description": "aggregation to be applied to reads before comparisson\n"
                },
                "alertItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/AlertAlertItem:AlertAlertItem"
                    },
                    "description": "variables to be calculated for a complex comparisson.\n"
                },
                "cronDom": {
                    "type": "integer",
                    "description": "schedule value for cron\n"
                },
                "cronDow": {
                    "type": "integer",
                    "description": "schedule value for cron\n"
                },
                "cronHours": {
                    "type": "integer",
                    "description": "schedule value for cron\n"
                },
                "cronMinutes": {
                    "type": "integer",
                    "description": "schedule value for cron\n"
                },
                "cronMonth": {
                    "type": "integer",
                    "description": "schedule value for cron\n"
                },
                "cronYear": {
                    "type": "integer",
                    "description": "schedule value for cron\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the resource\n"
                },
                "operator": {
                    "type": "string",
                    "description": "operator to be used to compare the read value with the threshold value\n"
                },
                "rateUnit": {
                    "type": "string",
                    "description": "[day|hour|minute] schedule unit\n"
                },
                "rateValue": {
                    "type": "integer",
                    "description": "schedule value\n"
                },
                "relatedAssets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "related assets to be linked. In case one of these alerts triggers it will be reflected on each of these assets.\n"
                },
                "severity": {
                    "type": "string",
                    "description": "[sev1,...,sev8] severity for the alert\n"
                },
                "targetVariable": {
                    "type": "string",
                    "description": "variable to be used to compare with thresholds\n"
                },
                "thresholds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/AlertThreshold:AlertThreshold"
                    }
                },
                "timeWindow": {
                    "type": "integer",
                    "description": "window to fetch data from. Data out of that window will not be considered for evaluation\n"
                },
                "type": {
                    "type": "string",
                    "description": "[cron|rate] type for the cron\n"
                }
            },
            "required": [
                "aggregation",
                "alertItems",
                "cronDom",
                "cronDow",
                "cronHours",
                "cronMinutes",
                "cronMonth",
                "cronYear",
                "description",
                "name",
                "operator",
                "rateUnit",
                "rateValue",
                "severity",
                "targetVariable",
                "thresholds",
                "timeWindow",
                "type"
            ],
            "inputProperties": {
                "aggregation": {
                    "type": "string",
                    "description": "aggregation to be applied to reads before comparisson\n"
                },
                "alertItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/AlertAlertItem:AlertAlertItem"
                    },
                    "description": "variables to be calculated for a complex comparisson.\n"
                },
                "cronDom": {
                    "type": "integer",
                    "description": "schedule value for cron\n"
                },
                "cronDow": {
                    "type": "integer",
                    "description": "schedule value for cron\n"
                },
                "cronHours": {
                    "type": "integer",
                    "description": "schedule value for cron\n"
                },
                "cronMinutes": {
                    "type": "integer",
                    "description": "schedule value for cron\n"
                },
                "cronMonth": {
                    "type": "integer",
                    "description": "schedule value for cron\n"
                },
                "cronYear": {
                    "type": "integer",
                    "description": "schedule value for cron\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the resource\n"
                },
                "operator": {
                    "type": "string",
                    "description": "operator to be used to compare the read value with the threshold value\n"
                },
                "rateUnit": {
                    "type": "string",
                    "description": "[day|hour|minute] schedule unit\n"
                },
                "rateValue": {
                    "type": "integer",
                    "description": "schedule value\n"
                },
                "relatedAssets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "related assets to be linked. In case one of these alerts triggers it will be reflected on each of these assets.\n"
                },
                "severity": {
                    "type": "string",
                    "description": "[sev1,...,sev8] severity for the alert\n"
                },
                "targetVariable": {
                    "type": "string",
                    "description": "variable to be used to compare with thresholds\n"
                },
                "thresholds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/AlertThreshold:AlertThreshold"
                    }
                },
                "timeWindow": {
                    "type": "integer",
                    "description": "window to fetch data from. Data out of that window will not be considered for evaluation\n"
                },
                "type": {
                    "type": "string",
                    "description": "[cron|rate] type for the cron\n"
                }
            },
            "requiredInputs": [
                "aggregation",
                "alertItems",
                "description",
                "operator",
                "severity",
                "targetVariable",
                "thresholds",
                "timeWindow",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Alert resources.\n",
                "properties": {
                    "aggregation": {
                        "type": "string",
                        "description": "aggregation to be applied to reads before comparisson\n"
                    },
                    "alertItems": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/AlertAlertItem:AlertAlertItem"
                        },
                        "description": "variables to be calculated for a complex comparisson.\n"
                    },
                    "cronDom": {
                        "type": "integer",
                        "description": "schedule value for cron\n"
                    },
                    "cronDow": {
                        "type": "integer",
                        "description": "schedule value for cron\n"
                    },
                    "cronHours": {
                        "type": "integer",
                        "description": "schedule value for cron\n"
                    },
                    "cronMinutes": {
                        "type": "integer",
                        "description": "schedule value for cron\n"
                    },
                    "cronMonth": {
                        "type": "integer",
                        "description": "schedule value for cron\n"
                    },
                    "cronYear": {
                        "type": "integer",
                        "description": "schedule value for cron\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the resource\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the resource\n"
                    },
                    "operator": {
                        "type": "string",
                        "description": "operator to be used to compare the read value with the threshold value\n"
                    },
                    "rateUnit": {
                        "type": "string",
                        "description": "[day|hour|minute] schedule unit\n"
                    },
                    "rateValue": {
                        "type": "integer",
                        "description": "schedule value\n"
                    },
                    "relatedAssets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "related assets to be linked. In case one of these alerts triggers it will be reflected on each of these assets.\n"
                    },
                    "severity": {
                        "type": "string",
                        "description": "[sev1,...,sev8] severity for the alert\n"
                    },
                    "targetVariable": {
                        "type": "string",
                        "description": "variable to be used to compare with thresholds\n"
                    },
                    "thresholds": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/AlertThreshold:AlertThreshold"
                        }
                    },
                    "timeWindow": {
                        "type": "integer",
                        "description": "window to fetch data from. Data out of that window will not be considered for evaluation\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "[cron|rate] type for the cron\n"
                    }
                },
                "type": "object"
            }
        },
        "splight:index/asset:Asset": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as spl from \"@pulumi/spl\";\n\nconst assetMainTest = new spl.index.Spl_asset(\"assetMainTest\", {\n    name: \"AssetTF\",\n    description: \"Created with Terraform\",\n    geometry: JSON.stringify({\n        type: \"GeometryCollection\",\n        geometries: [],\n    }),\n});\n```\n```python\nimport pulumi\nimport json\nimport pulumi_spl as spl\n\nasset_main_test = spl.index.Spl_asset(\"assetMainTest\",\n    name=AssetTF,\n    description=Created with Terraform,\n    geometry=json.dumps({\n        type: GeometryCollection,\n        geometries: [],\n    }))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.Json;\nusing Pulumi;\nusing Spl = Pulumi.Spl;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var assetMainTest = new Spl.Index.Spl_asset(\"assetMainTest\", new()\n    {\n        Name = \"AssetTF\",\n        Description = \"Created with Terraform\",\n        Geometry = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n        {\n            [\"type\"] = \"GeometryCollection\",\n            [\"geometries\"] = new[]\n            {\n            },\n        }),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/pulumi/pulumi-spl/sdk/v1/go/spl\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\nfunc main() {\npulumi.Run(func(ctx *pulumi.Context) error {\n_, err := index.NewSpl_asset(ctx, \"assetMainTest\", \u0026index.Spl_assetArgs{\nName: \"AssetTF\",\nDescription: \"Created with Terraform\",\nGeometry: %!v(PANIC=Format method: fatal: An assertion has failed: unlowered function toJSON),\n})\nif err != nil {\nreturn err\n}\nreturn nil\n})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.spl.spl_asset;\nimport com.pulumi.spl.Spl_assetArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var assetMainTest = new Spl_asset(\"assetMainTest\", Spl_assetArgs.builder()        \n            .name(\"AssetTF\")\n            .description(\"Created with Terraform\")\n            .geometry(serializeJson(\n                jsonObject(\n                    jsonProperty(\"type\", \"GeometryCollection\"),\n                    jsonProperty(\"geometries\", jsonArray(\n                    ))\n                )))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  assetMainTest:\n    type: spl:spl_asset\n    properties:\n      name: AssetTF\n      description: Created with Terraform\n      geometry:\n        fn::toJSON:\n          type: GeometryCollection\n          geometries: []\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import splight:index/asset:Asset [options] spl_asset.\u003cname\u003e \u003casset_id\u003e\n```\n\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "description of the resource\n"
                },
                "geometry": {
                    "type": "string",
                    "description": "geo position and shape of the resource\n"
                },
                "kinds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/AssetKind:AssetKind"
                    },
                    "description": "kind of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                },
                "relatedAssets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "linked assets\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "description of the resource\n"
                },
                "geometry": {
                    "type": "string",
                    "description": "geo position and shape of the resource\n"
                },
                "kinds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/AssetKind:AssetKind"
                    },
                    "description": "kind of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                },
                "relatedAssets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "linked assets\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Asset resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "description of the resource\n"
                    },
                    "geometry": {
                        "type": "string",
                        "description": "geo position and shape of the resource\n"
                    },
                    "kinds": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/AssetKind:AssetKind"
                        },
                        "description": "kind of the resource\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "name of the resource\n"
                    },
                    "relatedAssets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "linked assets\n"
                    }
                },
                "type": "object"
            }
        },
        "splight:index/assetAttribute:AssetAttribute": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as spl from \"@pulumi/spl\";\n\nconst assetTestFunctionAttribute = new spl.index.Spl_asset_attribute(\"assetTestFunctionAttribute\", {\n    name: \"Attribute\",\n    type: \"Number\",\n    asset: \"1234-1234-1234-1234\",\n});\n```\n```python\nimport pulumi\nimport pulumi_spl as spl\n\nasset_test_function_attribute = spl.index.Spl_asset_attribute(\"assetTestFunctionAttribute\",\n    name=Attribute,\n    type=Number,\n    asset=1234-1234-1234-1234)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Spl = Pulumi.Spl;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var assetTestFunctionAttribute = new Spl.Index.Spl_asset_attribute(\"assetTestFunctionAttribute\", new()\n    {\n        Name = \"Attribute\",\n        Type = \"Number\",\n        Asset = \"1234-1234-1234-1234\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-spl/sdk/v1/go/spl\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := index.NewSpl_asset_attribute(ctx, \"assetTestFunctionAttribute\", \u0026index.Spl_asset_attributeArgs{\n\t\t\tName:  \"Attribute\",\n\t\t\tType:  \"Number\",\n\t\t\tAsset: \"1234-1234-1234-1234\",\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.spl.spl_asset_attribute;\nimport com.pulumi.spl.Spl_asset_attributeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var assetTestFunctionAttribute = new Spl_asset_attribute(\"assetTestFunctionAttribute\", Spl_asset_attributeArgs.builder()        \n            .name(\"Attribute\")\n            .type(\"Number\")\n            .asset(\"1234-1234-1234-1234\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  assetTestFunctionAttribute:\n    type: spl:spl_asset_attribute\n    properties:\n      name: Attribute\n      type: Number\n      asset: 1234-1234-1234-1234\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import splight:index/assetAttribute:AssetAttribute [options] spl_asset_attribute.\u003cname\u003e \u003casset_attribute_id\u003e\n```\n\n",
            "properties": {
                "asset": {
                    "type": "string",
                    "description": "reference to the asset to be linked to\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                },
                "type": {
                    "type": "string",
                    "description": "[string|boolean|number] type of the data to be ingested in this attribute\n"
                },
                "unit": {
                    "type": "string",
                    "description": "optional reference to the unit of the measure\n"
                }
            },
            "required": [
                "asset",
                "name",
                "type"
            ],
            "inputProperties": {
                "asset": {
                    "type": "string",
                    "description": "reference to the asset to be linked to\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                },
                "type": {
                    "type": "string",
                    "description": "[string|boolean|number] type of the data to be ingested in this attribute\n"
                },
                "unit": {
                    "type": "string",
                    "description": "optional reference to the unit of the measure\n"
                }
            },
            "requiredInputs": [
                "asset",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AssetAttribute resources.\n",
                "properties": {
                    "asset": {
                        "type": "string",
                        "description": "reference to the asset to be linked to\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "name of the resource\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "[string|boolean|number] type of the data to be ingested in this attribute\n"
                    },
                    "unit": {
                        "type": "string",
                        "description": "optional reference to the unit of the measure\n"
                    }
                },
                "type": "object"
            }
        },
        "splight:index/assetMetadata:AssetMetadata": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as spl from \"@pulumi/spl\";\n\nconst assetTestMetadata = new spl.index.Spl_asset_metadata(\"assetTestMetadata\", {\n    name: \"Key\",\n    value: \"Value\",\n    type: \"String\",\n    asset: \"1234-1234-1234-1234\",\n});\n```\n```python\nimport pulumi\nimport pulumi_spl as spl\n\nasset_test_metadata = spl.index.Spl_asset_metadata(\"assetTestMetadata\",\n    name=Key,\n    value=Value,\n    type=String,\n    asset=1234-1234-1234-1234)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Spl = Pulumi.Spl;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var assetTestMetadata = new Spl.Index.Spl_asset_metadata(\"assetTestMetadata\", new()\n    {\n        Name = \"Key\",\n        Value = \"Value\",\n        Type = \"String\",\n        Asset = \"1234-1234-1234-1234\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-spl/sdk/v1/go/spl\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := index.NewSpl_asset_metadata(ctx, \"assetTestMetadata\", \u0026index.Spl_asset_metadataArgs{\n\t\t\tName:  \"Key\",\n\t\t\tValue: \"Value\",\n\t\t\tType:  \"String\",\n\t\t\tAsset: \"1234-1234-1234-1234\",\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.spl.spl_asset_metadata;\nimport com.pulumi.spl.Spl_asset_metadataArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var assetTestMetadata = new Spl_asset_metadata(\"assetTestMetadata\", Spl_asset_metadataArgs.builder()        \n            .name(\"Key\")\n            .value(\"Value\")\n            .type(\"String\")\n            .asset(\"1234-1234-1234-1234\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  assetTestMetadata:\n    type: spl:spl_asset_metadata\n    properties:\n      name: Key\n      value: Value\n      type: String\n      asset: 1234-1234-1234-1234\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import splight:index/assetMetadata:AssetMetadata [options] spl_asset_metadata.\u003cname\u003e \u003casset_metadata_id\u003e\n```\n\n",
            "properties": {
                "asset": {
                    "type": "string",
                    "description": "reference to the asset to be linked to\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                },
                "type": {
                    "type": "string",
                    "description": "[string|boolean|number] type of the data to be ingested in this attribute\n"
                },
                "unit": {
                    "type": "string",
                    "description": "optional reference to the unit of the measure\n"
                },
                "value": {
                    "type": "string",
                    "description": "metadata value\n"
                }
            },
            "required": [
                "asset",
                "name",
                "type",
                "value"
            ],
            "inputProperties": {
                "asset": {
                    "type": "string",
                    "description": "reference to the asset to be linked to\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "name of the resource\n"
                },
                "type": {
                    "type": "string",
                    "description": "[string|boolean|number] type of the data to be ingested in this attribute\n"
                },
                "unit": {
                    "type": "string",
                    "description": "optional reference to the unit of the measure\n"
                },
                "value": {
                    "type": "string",
                    "description": "metadata value\n"
                }
            },
            "requiredInputs": [
                "asset",
                "type",
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AssetMetadata resources.\n",
                "properties": {
                    "asset": {
                        "type": "string",
                        "description": "reference to the asset to be linked to\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "name of the resource\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "[string|boolean|number] type of the data to be ingested in this attribute\n"
                    },
                    "unit": {
                        "type": "string",
                        "description": "optional reference to the unit of the measure\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "metadata value\n"
                    }
                },
                "type": "object"
            }
        },
        "splight:index/component:Component": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as spl from \"@pulumi/spl\";\n\nconst componentTest = new spl.index.Spl_component(\"componentTest\", {\n    name: \"ComponentTest\",\n    description: \"Created with Terraform\",\n    version: \"Random-3.1.0\",\n    input: [\n        {\n            name: \"period\",\n            type: \"int\",\n            value: 10,\n            multiple: false,\n            required: false,\n            sensitive: false,\n            description: \"\",\n        },\n        {\n            name: \"min\",\n            type: \"int\",\n            value: 1,\n            multiple: false,\n            required: false,\n            sensitive: false,\n            description: \"\",\n        },\n        {\n            name: \"max\",\n            type: \"int\",\n            value: 150,\n            multiple: false,\n            required: false,\n            sensitive: false,\n            description: \"\",\n        },\n        {\n            name: \"max_iterations\",\n            type: \"int\",\n            value: 3,\n            multiple: false,\n            required: false,\n            sensitive: false,\n            description: \"\",\n        },\n        {\n            name: \"should_crash\",\n            type: \"bool\",\n            value: \"true\",\n            multiple: false,\n            required: false,\n            sensitive: false,\n            description: \"\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_spl as spl\n\ncomponent_test = spl.index.Spl_component(\"componentTest\",\n    name=ComponentTest,\n    description=Created with Terraform,\n    version=Random-3.1.0,\n    input=[\n        {\n            name: period,\n            type: int,\n            value: 10,\n            multiple: False,\n            required: False,\n            sensitive: False,\n            description: ,\n        },\n        {\n            name: min,\n            type: int,\n            value: 1,\n            multiple: False,\n            required: False,\n            sensitive: False,\n            description: ,\n        },\n        {\n            name: max,\n            type: int,\n            value: 150,\n            multiple: False,\n            required: False,\n            sensitive: False,\n            description: ,\n        },\n        {\n            name: max_iterations,\n            type: int,\n            value: 3,\n            multiple: False,\n            required: False,\n            sensitive: False,\n            description: ,\n        },\n        {\n            name: should_crash,\n            type: bool,\n            value: true,\n            multiple: False,\n            required: False,\n            sensitive: False,\n            description: ,\n        },\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Spl = Pulumi.Spl;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var componentTest = new Spl.Index.Spl_component(\"componentTest\", new()\n    {\n        Name = \"ComponentTest\",\n        Description = \"Created with Terraform\",\n        Version = \"Random-3.1.0\",\n        Input = new[]\n        {\n            \n            {\n                { \"name\", \"period\" },\n                { \"type\", \"int\" },\n                { \"value\", 10 },\n                { \"multiple\", false },\n                { \"required\", false },\n                { \"sensitive\", false },\n                { \"description\", \"\" },\n            },\n            \n            {\n                { \"name\", \"min\" },\n                { \"type\", \"int\" },\n                { \"value\", 1 },\n                { \"multiple\", false },\n                { \"required\", false },\n                { \"sensitive\", false },\n                { \"description\", \"\" },\n            },\n            \n            {\n                { \"name\", \"max\" },\n                { \"type\", \"int\" },\n                { \"value\", 150 },\n                { \"multiple\", false },\n                { \"required\", false },\n                { \"sensitive\", false },\n                { \"description\", \"\" },\n            },\n            \n            {\n                { \"name\", \"max_iterations\" },\n                { \"type\", \"int\" },\n                { \"value\", 3 },\n                { \"multiple\", false },\n                { \"required\", false },\n                { \"sensitive\", false },\n                { \"description\", \"\" },\n            },\n            \n            {\n                { \"name\", \"should_crash\" },\n                { \"type\", \"bool\" },\n                { \"value\", \"true\" },\n                { \"multiple\", false },\n                { \"required\", false },\n                { \"sensitive\", false },\n                { \"description\", \"\" },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-spl/sdk/v1/go/spl\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := index.NewSpl_component(ctx, \"componentTest\", \u0026index.Spl_componentArgs{\n\t\t\tName:        \"ComponentTest\",\n\t\t\tDescription: \"Created with Terraform\",\n\t\t\tVersion:     \"Random-3.1.0\",\n\t\t\tInput: []interface{}{\n\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\"name\":        \"period\",\n\t\t\t\t\t\"type\":        \"int\",\n\t\t\t\t\t\"value\":       10,\n\t\t\t\t\t\"multiple\":    false,\n\t\t\t\t\t\"required\":    false,\n\t\t\t\t\t\"sensitive\":   false,\n\t\t\t\t\t\"description\": \"\",\n\t\t\t\t},\n\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\"name\":        \"min\",\n\t\t\t\t\t\"type\":        \"int\",\n\t\t\t\t\t\"value\":       1,\n\t\t\t\t\t\"multiple\":    false,\n\t\t\t\t\t\"required\":    false,\n\t\t\t\t\t\"sensitive\":   false,\n\t\t\t\t\t\"description\": \"\",\n\t\t\t\t},\n\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\"name\":        \"max\",\n\t\t\t\t\t\"type\":        \"int\",\n\t\t\t\t\t\"value\":       150,\n\t\t\t\t\t\"multiple\":    false,\n\t\t\t\t\t\"required\":    false,\n\t\t\t\t\t\"sensitive\":   false,\n\t\t\t\t\t\"description\": \"\",\n\t\t\t\t},\n\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\"name\":        \"max_iterations\",\n\t\t\t\t\t\"type\":        \"int\",\n\t\t\t\t\t\"value\":       3,\n\t\t\t\t\t\"multiple\":    false,\n\t\t\t\t\t\"required\":    false,\n\t\t\t\t\t\"sensitive\":   false,\n\t\t\t\t\t\"description\": \"\",\n\t\t\t\t},\n\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\"name\":        \"should_crash\",\n\t\t\t\t\t\"type\":        \"bool\",\n\t\t\t\t\t\"value\":       \"true\",\n\t\t\t\t\t\"multiple\":    false,\n\t\t\t\t\t\"required\":    false,\n\t\t\t\t\t\"sensitive\":   false,\n\t\t\t\t\t\"description\": \"\",\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.spl.spl_component;\nimport com.pulumi.spl.Spl_componentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var componentTest = new Spl_component(\"componentTest\", Spl_componentArgs.builder()        \n            .name(\"ComponentTest\")\n            .description(\"Created with Terraform\")\n            .version(\"Random-3.1.0\")\n            .input(            \n                %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference),\n                %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference),\n                %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference),\n                %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference),\n                %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  componentTest:\n    type: spl:spl_component\n    properties:\n      name: ComponentTest\n      description: Created with Terraform\n      version: Random-3.1.0\n      input:\n        - name: period\n          type: int\n          value: 10\n          multiple: false\n          required: false\n          sensitive: false\n          description:\n        - name: min\n          type: int\n          value: 1\n          multiple: false\n          required: false\n          sensitive: false\n          description:\n        - name: max\n          type: int\n          value: 150\n          multiple: false\n          required: false\n          sensitive: false\n          description:\n        - name: max_iterations\n          type: int\n          value: 3\n          multiple: false\n          required: false\n          sensitive: false\n          description:\n        - name: should_crash\n          type: bool\n          value: 'true'\n          multiple: false\n          required: false\n          sensitive: false\n          description:\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import splight:index/component:Component [options] spl_component.\u003cname\u003e \u003ccomponent_id\u003e\n```\n\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "optinal description to add details of the resource\n"
                },
                "inputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/ComponentInput:ComponentInput"
                    },
                    "description": "The input parameters based on hubcomponent spec\n"
                },
                "name": {
                    "type": "string",
                    "description": "the name of the component to be created\n"
                },
                "version": {
                    "type": "string",
                    "description": "[NAME-VERSION] the version of the hub component\n"
                }
            },
            "required": [
                "inputs",
                "name",
                "version"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "optinal description to add details of the resource\n"
                },
                "inputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/ComponentInput:ComponentInput"
                    },
                    "description": "The input parameters based on hubcomponent spec\n"
                },
                "name": {
                    "type": "string",
                    "description": "the name of the component to be created\n"
                },
                "version": {
                    "type": "string",
                    "description": "[NAME-VERSION] the version of the hub component\n"
                }
            },
            "requiredInputs": [
                "inputs",
                "version"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Component resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "optinal description to add details of the resource\n"
                    },
                    "inputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/ComponentInput:ComponentInput"
                        },
                        "description": "The input parameters based on hubcomponent spec\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "the name of the component to be created\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "[NAME-VERSION] the version of the hub component\n"
                    }
                },
                "type": "object"
            }
        },
        "splight:index/componentRoutine:ComponentRoutine": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as spl from \"@pulumi/spl\";\n\nconst componentTestRoutine = new spl.index.Spl_component_routine(\"componentTestRoutine\", {\n    name: \"ComponentTestRoutine\",\n    description: \"Created with Terraform\",\n    type: \"IncomingRoutine\",\n    componentId: \"1234-1234-1234-1234\",\n    config: [{\n        name: \"config_param\",\n        type: \"bool\",\n        value: \"true\",\n        multiple: false,\n        required: true,\n        sensitive: false,\n        description: \"Created with Terraform123123\",\n    }],\n    output: [{\n        name: \"address\",\n        description: \"destination address for data to be pushed\",\n        type: \"DataAddress\",\n        valueType: \"Number\",\n        multiple: false,\n        required: true,\n        value: JSON.stringify({\n            asset: \"1234-1234-1234-1234\",\n            attribute: \"1234-1234-1234-1234\",\n        }),\n    }],\n});\n```\n```python\nimport pulumi\nimport json\nimport pulumi_spl as spl\n\ncomponent_test_routine = spl.index.Spl_component_routine(\"componentTestRoutine\",\n    name=ComponentTestRoutine,\n    description=Created with Terraform,\n    type=IncomingRoutine,\n    component_id=1234-1234-1234-1234,\n    config=[{\n        name: config_param,\n        type: bool,\n        value: true,\n        multiple: False,\n        required: True,\n        sensitive: False,\n        description: Created with Terraform123123,\n    }],\n    output=[{\n        name: address,\n        description: destination address for data to be pushed,\n        type: DataAddress,\n        valueType: Number,\n        multiple: False,\n        required: True,\n        value: json.dumps({\n            asset: 1234-1234-1234-1234,\n            attribute: 1234-1234-1234-1234,\n        }),\n    }])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.Json;\nusing Pulumi;\nusing Spl = Pulumi.Spl;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var componentTestRoutine = new Spl.Index.Spl_component_routine(\"componentTestRoutine\", new()\n    {\n        Name = \"ComponentTestRoutine\",\n        Description = \"Created with Terraform\",\n        Type = \"IncomingRoutine\",\n        ComponentId = \"1234-1234-1234-1234\",\n        Config = new[]\n        {\n            \n            {\n                { \"name\", \"config_param\" },\n                { \"type\", \"bool\" },\n                { \"value\", \"true\" },\n                { \"multiple\", false },\n                { \"required\", true },\n                { \"sensitive\", false },\n                { \"description\", \"Created with Terraform123123\" },\n            },\n        },\n        Output = new[]\n        {\n            \n            {\n                { \"name\", \"address\" },\n                { \"description\", \"destination address for data to be pushed\" },\n                { \"type\", \"DataAddress\" },\n                { \"valueType\", \"Number\" },\n                { \"multiple\", false },\n                { \"required\", true },\n                { \"value\", JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n                {\n                    [\"asset\"] = \"1234-1234-1234-1234\",\n                    [\"attribute\"] = \"1234-1234-1234-1234\",\n                }) },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/pulumi/pulumi-spl/sdk/v1/go/spl\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\nfunc main() {\npulumi.Run(func(ctx *pulumi.Context) error {\n_, err := index.NewSpl_component_routine(ctx, \"componentTestRoutine\", \u0026index.Spl_component_routineArgs{\nName: \"ComponentTestRoutine\",\nDescription: \"Created with Terraform\",\nType: \"IncomingRoutine\",\nComponentId: \"1234-1234-1234-1234\",\nConfig: []map[string]interface{}{\nmap[string]interface{}{\n\"name\": \"config_param\",\n\"type\": \"bool\",\n\"value\": \"true\",\n\"multiple\": false,\n\"required\": true,\n\"sensitive\": false,\n\"description\": \"Created with Terraform123123\",\n},\n},\nOutput: tmpJSON0, err := json.Marshal(map[string]interface{}{\n\"asset\": \"1234-1234-1234-1234\",\n\"attribute\": \"1234-1234-1234-1234\",\n})\nif err != nil {\nreturn err\n}\njson0 := string(tmpJSON0)\n[]map[string]interface{}{\nmap[string]interface{}{\n\"name\": \"address\",\n\"description\": \"destination address for data to be pushed\",\n\"type\": \"DataAddress\",\n\"valueType\": \"Number\",\n\"multiple\": false,\n\"required\": true,\n\"value\": json0,\n},\n},\n})\nif err != nil {\nreturn err\n}\nreturn nil\n})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.spl.spl_component_routine;\nimport com.pulumi.spl.Spl_component_routineArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var componentTestRoutine = new Spl_component_routine(\"componentTestRoutine\", Spl_component_routineArgs.builder()        \n            .name(\"ComponentTestRoutine\")\n            .description(\"Created with Terraform\")\n            .type(\"IncomingRoutine\")\n            .componentId(\"1234-1234-1234-1234\")\n            .config(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n            .output(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  componentTestRoutine:\n    type: spl:spl_component_routine\n    properties:\n      name: ComponentTestRoutine\n      description: Created with Terraform\n      type: IncomingRoutine\n      componentId: 1234-1234-1234-1234\n      config:\n        - name: config_param\n          type: bool\n          value: 'true'\n          multiple: false\n          required: true\n          sensitive: false\n          description: Created with Terraform123123\n      output:\n        - name: address\n          description: destination address for data to be pushed\n          type: DataAddress\n          valueType: Number\n          multiple: false\n          required: true\n          value:\n            fn::toJSON:\n              asset: 1234-1234-1234-1234\n              attribute: 1234-1234-1234-1234\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import splight:index/componentRoutine:ComponentRoutine [options] spl_component_routine.\u003cname\u003e \u003ccomponent_routine_id\u003e\n```\n\n",
            "properties": {
                "componentId": {
                    "type": "string",
                    "description": "reference to component to be attached\n"
                },
                "configs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/ComponentRoutineConfig:ComponentRoutineConfig"
                    },
                    "description": "static config parameters of the routine\n"
                },
                "description": {
                    "type": "string",
                    "description": "optional complementary information about the routine\n"
                },
                "inputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/ComponentRoutineInput:ComponentRoutineInput"
                    },
                    "description": "asset attribute where to read data. Only valid for OutgoingRoutine\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the routine\n"
                },
                "outputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/ComponentRoutineOutput:ComponentRoutineOutput"
                    },
                    "description": "asset attribute where to ingest data. Only valid for IncomingRoutine\n"
                },
                "type": {
                    "type": "string",
                    "description": "[IncomingRoutine|OutgoingRoutine] direction of the data flow (from device to system or from system to device)\n"
                }
            },
            "required": [
                "componentId",
                "name",
                "type"
            ],
            "inputProperties": {
                "componentId": {
                    "type": "string",
                    "description": "reference to component to be attached\n"
                },
                "configs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/ComponentRoutineConfig:ComponentRoutineConfig"
                    },
                    "description": "static config parameters of the routine\n"
                },
                "description": {
                    "type": "string",
                    "description": "optional complementary information about the routine\n"
                },
                "inputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/ComponentRoutineInput:ComponentRoutineInput"
                    },
                    "description": "asset attribute where to read data. Only valid for OutgoingRoutine\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the routine\n"
                },
                "outputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/ComponentRoutineOutput:ComponentRoutineOutput"
                    },
                    "description": "asset attribute where to ingest data. Only valid for IncomingRoutine\n"
                },
                "type": {
                    "type": "string",
                    "description": "[IncomingRoutine|OutgoingRoutine] direction of the data flow (from device to system or from system to device)\n"
                }
            },
            "requiredInputs": [
                "componentId",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ComponentRoutine resources.\n",
                "properties": {
                    "componentId": {
                        "type": "string",
                        "description": "reference to component to be attached\n"
                    },
                    "configs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/ComponentRoutineConfig:ComponentRoutineConfig"
                        },
                        "description": "static config parameters of the routine\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "optional complementary information about the routine\n"
                    },
                    "inputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/ComponentRoutineInput:ComponentRoutineInput"
                        },
                        "description": "asset attribute where to read data. Only valid for OutgoingRoutine\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "name of the routine\n"
                    },
                    "outputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/ComponentRoutineOutput:ComponentRoutineOutput"
                        },
                        "description": "asset attribute where to ingest data. Only valid for IncomingRoutine\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "[IncomingRoutine|OutgoingRoutine] direction of the data flow (from device to system or from system to device)\n"
                    }
                },
                "type": "object"
            }
        },
        "splight:index/dashboard:Dashboard": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as spl from \"@pulumi/spl\";\n\nconst dashboardTest = new spl.index.Spl_dashboard(\"dashboardTest\", {\n    name: \"DashboardTest\",\n    relatedAssets: [\"1234-1234-1234-1234\"],\n});\n```\n```python\nimport pulumi\nimport pulumi_spl as spl\n\ndashboard_test = spl.index.Spl_dashboard(\"dashboardTest\",\n    name=DashboardTest,\n    related_assets=[1234-1234-1234-1234])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Spl = Pulumi.Spl;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var dashboardTest = new Spl.Index.Spl_dashboard(\"dashboardTest\", new()\n    {\n        Name = \"DashboardTest\",\n        RelatedAssets = new[]\n        {\n            \"1234-1234-1234-1234\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-spl/sdk/v1/go/spl\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := index.NewSpl_dashboard(ctx, \"dashboardTest\", \u0026index.Spl_dashboardArgs{\n\t\t\tName: \"DashboardTest\",\n\t\t\tRelatedAssets: []string{\n\t\t\t\t\"1234-1234-1234-1234\",\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.spl.spl_dashboard;\nimport com.pulumi.spl.Spl_dashboardArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var dashboardTest = new Spl_dashboard(\"dashboardTest\", Spl_dashboardArgs.builder()        \n            .name(\"DashboardTest\")\n            .relatedAssets(\"1234-1234-1234-1234\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  dashboardTest:\n    type: spl:spl_dashboard\n    properties:\n      name: DashboardTest\n      relatedAssets:\n        - 1234-1234-1234-1234\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import splight:index/dashboard:Dashboard [options] spl_dashboard.\u003cname\u003e \u003cdashboard_id\u003e\n```\n\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "complementary information for the dashboard\n"
                },
                "name": {
                    "type": "string",
                    "description": "dashboard name\n"
                },
                "relatedAssets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "assets linked\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "complementary information for the dashboard\n"
                },
                "name": {
                    "type": "string",
                    "description": "dashboard name\n"
                },
                "relatedAssets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "assets linked\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Dashboard resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "complementary information for the dashboard\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "dashboard name\n"
                    },
                    "relatedAssets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "assets linked\n"
                    }
                },
                "type": "object"
            }
        },
        "splight:index/dashboardChart:DashboardChart": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as spl from \"@pulumi/spl\";\n\nconst dashboardChartTest = new spl.index.Spl_dashboard_chart(\"dashboardChartTest\", {\n    name: \"ChartTest\",\n    type: \"timeseries\",\n    tab: \"1234-1234-1234-1234\",\n    timestampGte: \"now - 6h\",\n    timestampLte: \"now\",\n    chartItems: [\n        {\n            refId: \"A\",\n            type: \"QUERY\",\n            color: \"red\",\n            expressionPlain: \"\",\n            queryPlain: JSON.stringify([{\n                $match: {\n                    asset: \"1234-1234-1234-1234\",\n                    attribute: \"1234-1234-1234-1234\",\n                },\n            }]),\n        },\n        {\n            refId: \"B\",\n            color: \"blue\",\n            type: \"QUERY\",\n            expressionPlain: \"\",\n            queryPlain: JSON.stringify([{\n                $match: {\n                    asset: \"1234-1234-1234-1234\",\n                    attribute: \"1234-1234-1234-1234\",\n                },\n            }]),\n        },\n    ],\n    thresholds: [{\n        color: \"#00edcf\",\n        displayText: \"T1Test\",\n        value: 13.1,\n    }],\n    valueMappings: [{\n        displayText: \"MODIFICADO\",\n        matchValue: \"123.3\",\n        type: \"exact_match\",\n        order: 0,\n    }],\n});\n```\n```python\nimport pulumi\nimport json\nimport pulumi_spl as spl\n\ndashboard_chart_test = spl.index.Spl_dashboard_chart(\"dashboardChartTest\",\n    name=ChartTest,\n    type=timeseries,\n    tab=1234-1234-1234-1234,\n    timestamp_gte=now - 6h,\n    timestamp_lte=now,\n    chart_items=[\n        {\n            refId: A,\n            type: QUERY,\n            color: red,\n            expressionPlain: ,\n            queryPlain: json.dumps([{\n                $match: {\n                    asset: 1234-1234-1234-1234,\n                    attribute: 1234-1234-1234-1234,\n                },\n            }]),\n        },\n        {\n            refId: B,\n            color: blue,\n            type: QUERY,\n            expressionPlain: ,\n            queryPlain: json.dumps([{\n                $match: {\n                    asset: 1234-1234-1234-1234,\n                    attribute: 1234-1234-1234-1234,\n                },\n            }]),\n        },\n    ],\n    thresholds=[{\n        color: #00edcf,\n        displayText: T1Test,\n        value: 13.1,\n    }],\n    value_mappings=[{\n        displayText: MODIFICADO,\n        matchValue: 123.3,\n        type: exact_match,\n        order: 0,\n    }])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.Json;\nusing Pulumi;\nusing Spl = Pulumi.Spl;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var dashboardChartTest = new Spl.Index.Spl_dashboard_chart(\"dashboardChartTest\", new()\n    {\n        Name = \"ChartTest\",\n        Type = \"timeseries\",\n        Tab = \"1234-1234-1234-1234\",\n        TimestampGte = \"now - 6h\",\n        TimestampLte = \"now\",\n        ChartItems = new[]\n        {\n            \n            {\n                { \"refId\", \"A\" },\n                { \"type\", \"QUERY\" },\n                { \"color\", \"red\" },\n                { \"expressionPlain\", \"\" },\n                { \"queryPlain\", JsonSerializer.Serialize(new[]\n                {\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"$match\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"asset\"] = \"1234-1234-1234-1234\",\n                            [\"attribute\"] = \"1234-1234-1234-1234\",\n                        },\n                    },\n                }) },\n            },\n            \n            {\n                { \"refId\", \"B\" },\n                { \"color\", \"blue\" },\n                { \"type\", \"QUERY\" },\n                { \"expressionPlain\", \"\" },\n                { \"queryPlain\", JsonSerializer.Serialize(new[]\n                {\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"$match\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"asset\"] = \"1234-1234-1234-1234\",\n                            [\"attribute\"] = \"1234-1234-1234-1234\",\n                        },\n                    },\n                }) },\n            },\n        },\n        Thresholds = new[]\n        {\n            \n            {\n                { \"color\", \"#00edcf\" },\n                { \"displayText\", \"T1Test\" },\n                { \"value\", 13.1 },\n            },\n        },\n        ValueMappings = new[]\n        {\n            \n            {\n                { \"displayText\", \"MODIFICADO\" },\n                { \"matchValue\", \"123.3\" },\n                { \"type\", \"exact_match\" },\n                { \"order\", 0 },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/pulumi/pulumi-spl/sdk/v1/go/spl\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\nfunc main() {\npulumi.Run(func(ctx *pulumi.Context) error {\n_, err := index.NewSpl_dashboard_chart(ctx, \"dashboardChartTest\", \u0026index.Spl_dashboard_chartArgs{\nName: \"ChartTest\",\nType: \"timeseries\",\nTab: \"1234-1234-1234-1234\",\nTimestampGte: \"now - 6h\",\nTimestampLte: \"now\",\nChartItems: tmpJSON0, err := json.Marshal([]map[string]interface{}{\nmap[string]interface{}{\n\"$match\": map[string]interface{}{\n\"asset\": \"1234-1234-1234-1234\",\n\"attribute\": \"1234-1234-1234-1234\",\n},\n},\n})\nif err != nil {\nreturn err\n}\njson0 := string(tmpJSON0)\ntmpJSON1, err := json.Marshal([]map[string]interface{}{\nmap[string]interface{}{\n\"$match\": map[string]interface{}{\n\"asset\": \"1234-1234-1234-1234\",\n\"attribute\": \"1234-1234-1234-1234\",\n},\n},\n})\nif err != nil {\nreturn err\n}\njson1 := string(tmpJSON1)\n[]map[string]interface{}{\nmap[string]interface{}{\n\"refId\": \"A\",\n\"type\": \"QUERY\",\n\"color\": \"red\",\n\"expressionPlain\": \"\",\n\"queryPlain\": json0,\n},\nmap[string]interface{}{\n\"refId\": \"B\",\n\"color\": \"blue\",\n\"type\": \"QUERY\",\n\"expressionPlain\": \"\",\n\"queryPlain\": json1,\n},\n},\nThresholds: []map[string]interface{}{\nmap[string]interface{}{\n\"color\": \"#00edcf\",\n\"displayText\": \"T1Test\",\n\"value\": 13.1,\n},\n},\nValueMappings: []map[string]interface{}{\nmap[string]interface{}{\n\"displayText\": \"MODIFICADO\",\n\"matchValue\": \"123.3\",\n\"type\": \"exact_match\",\n\"order\": 0,\n},\n},\n})\nif err != nil {\nreturn err\n}\nreturn nil\n})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.spl.spl_dashboard_chart;\nimport com.pulumi.spl.Spl_dashboard_chartArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var dashboardChartTest = new Spl_dashboard_chart(\"dashboardChartTest\", Spl_dashboard_chartArgs.builder()        \n            .name(\"ChartTest\")\n            .type(\"timeseries\")\n            .tab(\"1234-1234-1234-1234\")\n            .timestampGte(\"now - 6h\")\n            .timestampLte(\"now\")\n            .chartItems(            \n                %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference),\n                %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n            .thresholds(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n            .valueMappings(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  dashboardChartTest:\n    type: spl:spl_dashboard_chart\n    properties:\n      name: ChartTest\n      type: timeseries\n      tab: 1234-1234-1234-1234\n      timestampGte: now - 6h\n      timestampLte: now\n      chartItems:\n        - refId: A\n          type: QUERY\n          color: red\n          expressionPlain:\n          queryPlain:\n            fn::toJSON:\n              - $match:\n                  asset: 1234-1234-1234-1234\n                  attribute: 1234-1234-1234-1234\n        - refId: B\n          color: blue\n          type: QUERY\n          expressionPlain:\n          queryPlain:\n            fn::toJSON:\n              - $match:\n                  asset: 1234-1234-1234-1234\n                  attribute: 1234-1234-1234-1234\n      thresholds:\n        - color: '#00edcf'\n          displayText: T1Test\n          value: 13.1\n      valueMappings:\n        - displayText: MODIFICADO\n          matchValue: '123.3'\n          type: exact_match\n          order: 0\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import splight:index/dashboardChart:DashboardChart [options] spl_dashbaord_chart.\u003cname\u003e \u003cdashboard_chart_id\u003e\n```\n\n",
            "properties": {
                "chartItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardChartChartItem:DashboardChartChartItem"
                    },
                    "description": "chart traces to be included\n"
                },
                "height": {
                    "type": "integer",
                    "description": "chart height in px\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the chart\n"
                },
                "tab": {
                    "type": "string",
                    "description": "id for the tab where to place the chart\n"
                },
                "thresholds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardChartThreshold:DashboardChartThreshold"
                    },
                    "description": "optional static lines to be added to the chart as references\n"
                },
                "timestampGte": {
                    "type": "string",
                    "description": "date in isoformat or shortcut string where to end reading\n"
                },
                "timestampLte": {
                    "type": "string",
                    "description": "date in isoformat or shortcut string where to start reading\n"
                },
                "type": {
                    "type": "string",
                    "description": "[timeseries|bargauge|..] chart type\n"
                },
                "valueMappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardChartValueMapping:DashboardChartValueMapping"
                    },
                    "description": "optional mappings to transform data with rules\n"
                },
                "width": {
                    "type": "integer",
                    "description": "chart width in cols (max 20)\n"
                }
            },
            "required": [
                "chartItems",
                "name",
                "tab",
                "timestampGte",
                "timestampLte",
                "type"
            ],
            "inputProperties": {
                "chartItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardChartChartItem:DashboardChartChartItem"
                    },
                    "description": "chart traces to be included\n"
                },
                "height": {
                    "type": "integer",
                    "description": "chart height in px\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the chart\n"
                },
                "tab": {
                    "type": "string",
                    "description": "id for the tab where to place the chart\n"
                },
                "thresholds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardChartThreshold:DashboardChartThreshold"
                    },
                    "description": "optional static lines to be added to the chart as references\n"
                },
                "timestampGte": {
                    "type": "string",
                    "description": "date in isoformat or shortcut string where to end reading\n"
                },
                "timestampLte": {
                    "type": "string",
                    "description": "date in isoformat or shortcut string where to start reading\n"
                },
                "type": {
                    "type": "string",
                    "description": "[timeseries|bargauge|..] chart type\n"
                },
                "valueMappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/DashboardChartValueMapping:DashboardChartValueMapping"
                    },
                    "description": "optional mappings to transform data with rules\n"
                },
                "width": {
                    "type": "integer",
                    "description": "chart width in cols (max 20)\n"
                }
            },
            "requiredInputs": [
                "chartItems",
                "tab",
                "timestampGte",
                "timestampLte",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DashboardChart resources.\n",
                "properties": {
                    "chartItems": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/DashboardChartChartItem:DashboardChartChartItem"
                        },
                        "description": "chart traces to be included\n"
                    },
                    "height": {
                        "type": "integer",
                        "description": "chart height in px\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "name of the chart\n"
                    },
                    "tab": {
                        "type": "string",
                        "description": "id for the tab where to place the chart\n"
                    },
                    "thresholds": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/DashboardChartThreshold:DashboardChartThreshold"
                        },
                        "description": "optional static lines to be added to the chart as references\n"
                    },
                    "timestampGte": {
                        "type": "string",
                        "description": "date in isoformat or shortcut string where to end reading\n"
                    },
                    "timestampLte": {
                        "type": "string",
                        "description": "date in isoformat or shortcut string where to start reading\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "[timeseries|bargauge|..] chart type\n"
                    },
                    "valueMappings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/DashboardChartValueMapping:DashboardChartValueMapping"
                        },
                        "description": "optional mappings to transform data with rules\n"
                    },
                    "width": {
                        "type": "integer",
                        "description": "chart width in cols (max 20)\n"
                    }
                },
                "type": "object"
            }
        },
        "splight:index/dashboardTab:DashboardTab": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as spl from \"@pulumi/spl\";\n\nconst dashboardTabTest = new spl.index.Spl_dashboard_tab(\"dashboardTabTest\", {\n    name: \"TabTest\",\n    order: 0,\n    dashboard: \"1234-1234-1234-1234\",\n});\n```\n```python\nimport pulumi\nimport pulumi_spl as spl\n\ndashboard_tab_test = spl.index.Spl_dashboard_tab(\"dashboardTabTest\",\n    name=TabTest,\n    order=0,\n    dashboard=1234-1234-1234-1234)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Spl = Pulumi.Spl;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var dashboardTabTest = new Spl.Index.Spl_dashboard_tab(\"dashboardTabTest\", new()\n    {\n        Name = \"TabTest\",\n        Order = 0,\n        Dashboard = \"1234-1234-1234-1234\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-spl/sdk/v1/go/spl\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := index.NewSpl_dashboard_tab(ctx, \"dashboardTabTest\", \u0026index.Spl_dashboard_tabArgs{\n\t\t\tName:      \"TabTest\",\n\t\t\tOrder:     0,\n\t\t\tDashboard: \"1234-1234-1234-1234\",\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.spl.spl_dashboard_tab;\nimport com.pulumi.spl.Spl_dashboard_tabArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var dashboardTabTest = new Spl_dashboard_tab(\"dashboardTabTest\", Spl_dashboard_tabArgs.builder()        \n            .name(\"TabTest\")\n            .order(0)\n            .dashboard(\"1234-1234-1234-1234\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  dashboardTabTest:\n    type: spl:spl_dashboard_tab\n    properties:\n      name: TabTest\n      order: 0\n      dashboard: 1234-1234-1234-1234\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import splight:index/dashboardTab:DashboardTab [options] spl_dashboard_tab.\u003cname\u003e \u003cdashboard_tab_id\u003e\n```\n\n",
            "properties": {
                "dashboard": {
                    "type": "string",
                    "description": "dashboard id where to place it\n"
                },
                "name": {
                    "type": "string",
                    "description": "name for the tab\n"
                },
                "order": {
                    "type": "integer",
                    "description": "order within the dashboard\n"
                }
            },
            "required": [
                "dashboard",
                "name"
            ],
            "inputProperties": {
                "dashboard": {
                    "type": "string",
                    "description": "dashboard id where to place it\n"
                },
                "name": {
                    "type": "string",
                    "description": "name for the tab\n"
                },
                "order": {
                    "type": "integer",
                    "description": "order within the dashboard\n"
                }
            },
            "requiredInputs": [
                "dashboard"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DashboardTab resources.\n",
                "properties": {
                    "dashboard": {
                        "type": "string",
                        "description": "dashboard id where to place it\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "name for the tab\n"
                    },
                    "order": {
                        "type": "integer",
                        "description": "order within the dashboard\n"
                    }
                },
                "type": "object"
            }
        },
        "splight:index/file:File": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as spl from \"@pulumi/spl\";\n\nconst fileInnerTest = new spl.index.Spl_file(\"fileInnerTest\", {\n    file: \"./variables.tf\",\n    description: \"Sample file for testing inner file\",\n    parent: \"1234-1234-1234-1234\",\n});\n```\n```python\nimport pulumi\nimport pulumi_spl as spl\n\nfile_inner_test = spl.index.Spl_file(\"fileInnerTest\",\n    file=./variables.tf,\n    description=Sample file for testing inner file,\n    parent=1234-1234-1234-1234)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Spl = Pulumi.Spl;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var fileInnerTest = new Spl.Index.Spl_file(\"fileInnerTest\", new()\n    {\n        File = \"./variables.tf\",\n        Description = \"Sample file for testing inner file\",\n        Parent = \"1234-1234-1234-1234\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-spl/sdk/v1/go/spl\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := index.NewSpl_file(ctx, \"fileInnerTest\", \u0026index.Spl_fileArgs{\n\t\t\tFile:        \"./variables.tf\",\n\t\t\tDescription: \"Sample file for testing inner file\",\n\t\t\tParent:      \"1234-1234-1234-1234\",\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.spl.spl_file;\nimport com.pulumi.spl.Spl_fileArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var fileInnerTest = new Spl_file(\"fileInnerTest\", Spl_fileArgs.builder()        \n            .file(\"./variables.tf\")\n            .description(\"Sample file for testing inner file\")\n            .parent(\"1234-1234-1234-1234\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  fileInnerTest:\n    type: spl:spl_file\n    properties:\n      file: ./variables.tf\n      description: Sample file for testing inner file\n      parent: 1234-1234-1234-1234\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import splight:index/file:File [options] spl_file.\u003cname\u003e \u003cfile_id\u003e\n```\n\n",
            "properties": {
                "checksum": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "complementary information to describe the file\n"
                },
                "file": {
                    "type": "string",
                    "description": "the path for the file resource in your system\n"
                },
                "parent": {
                    "type": "string",
                    "description": "the id reference for a folder to be placed in\n"
                },
                "relatedAssets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "assets to be linked\n"
                }
            },
            "required": [
                "checksum",
                "file"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "complementary information to describe the file\n"
                },
                "file": {
                    "type": "string",
                    "description": "the path for the file resource in your system\n",
                    "willReplaceOnChanges": true
                },
                "parent": {
                    "type": "string",
                    "description": "the id reference for a folder to be placed in\n"
                },
                "relatedAssets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "assets to be linked\n"
                }
            },
            "requiredInputs": [
                "file"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering File resources.\n",
                "properties": {
                    "checksum": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string",
                        "description": "complementary information to describe the file\n"
                    },
                    "file": {
                        "type": "string",
                        "description": "the path for the file resource in your system\n",
                        "willReplaceOnChanges": true
                    },
                    "parent": {
                        "type": "string",
                        "description": "the id reference for a folder to be placed in\n"
                    },
                    "relatedAssets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "assets to be linked\n"
                    }
                },
                "type": "object"
            }
        },
        "splight:index/fileFolder:FileFolder": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as spl from \"@pulumi/spl\";\n\nconst fileFolderTest = new spl.index.Spl_file_folder(\"fileFolderTest\", {name: \"FolderTest\"});\n```\n```python\nimport pulumi\nimport pulumi_spl as spl\n\nfile_folder_test = spl.index.Spl_file_folder(\"fileFolderTest\", name=FolderTest)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Spl = Pulumi.Spl;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var fileFolderTest = new Spl.Index.Spl_file_folder(\"fileFolderTest\", new()\n    {\n        Name = \"FolderTest\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-spl/sdk/v1/go/spl\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := index.NewSpl_file_folder(ctx, \"fileFolderTest\", \u0026index.Spl_file_folderArgs{\n\t\t\tName: \"FolderTest\",\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.spl.spl_file_folder;\nimport com.pulumi.spl.Spl_file_folderArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var fileFolderTest = new Spl_file_folder(\"fileFolderTest\", Spl_file_folderArgs.builder()        \n            .name(\"FolderTest\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  fileFolderTest:\n    type: spl:spl_file_folder\n    properties:\n      name: FolderTest\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import splight:index/fileFolder:FileFolder [options] spl_file_folder.\u003cname\u003e \u003cfile_folder_id\u003e\n```\n\n",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "folder name\n"
                },
                "parent": {
                    "type": "string",
                    "description": "optional folder id where to place this folder\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "folder name\n",
                    "willReplaceOnChanges": true
                },
                "parent": {
                    "type": "string",
                    "description": "optional folder id where to place this folder\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FileFolder resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "folder name\n",
                        "willReplaceOnChanges": true
                    },
                    "parent": {
                        "type": "string",
                        "description": "optional folder id where to place this folder\n"
                    }
                },
                "type": "object"
            }
        },
        "splight:index/function:Function": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as spl from \"@pulumi/spl\";\n\nconst functionTest = new spl.index.Spl_function(\"functionTest\", {\n    name: \"FunctionTest\",\n    description: \"Created with Terraform\",\n    type: \"rate\",\n    timeWindow: 600,\n    rateValue: 10,\n    rateUnit: \"minute\",\n    targetVariable: \"A\",\n    targetAsset: {\n        id: \"49551a15-d79b-40dc-9434-1b33d6b2fcb2\",\n        name: \"An asset\",\n    },\n    targetAttribute: {\n        id: \"49551a15-d79b-40dc-9434-1b33d6b2fcb2\",\n        name: \"An attribute\",\n    },\n    functionItems: [\n        {\n            refId: \"A\",\n            type: \"QUERY\",\n            expressionPlain: \"\",\n            queryPlain: JSON.stringify([{\n                $match: {\n                    asset: \"49551a15-d79b-40dc-9434-1b33d6b2fcb2\",\n                    attribute: \"c1d0d94b-5feb-4ebb-a527-0b0a34196252\",\n                },\n            }]),\n        },\n        {\n            refId: \"B\",\n            type: \"QUERY\",\n            expressionPlain: \"\",\n            queryPlain: JSON.stringify([{\n                $match: {\n                    asset: \"49551a15-d79b-40dc-9434-1b33d6b2fcb2\",\n                    attribute: \"c1d0d94b-5feb-4ebb-a527-0b0a34196252\",\n                },\n            }]),\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport json\nimport pulumi_spl as spl\n\nfunction_test = spl.index.Spl_function(\"functionTest\",\n    name=FunctionTest,\n    description=Created with Terraform,\n    type=rate,\n    time_window=600,\n    rate_value=10,\n    rate_unit=minute,\n    target_variable=A,\n    target_asset={\n        id: 49551a15-d79b-40dc-9434-1b33d6b2fcb2,\n        name: An asset,\n    },\n    target_attribute={\n        id: 49551a15-d79b-40dc-9434-1b33d6b2fcb2,\n        name: An attribute,\n    },\n    function_items=[\n        {\n            refId: A,\n            type: QUERY,\n            expressionPlain: ,\n            queryPlain: json.dumps([{\n                $match: {\n                    asset: 49551a15-d79b-40dc-9434-1b33d6b2fcb2,\n                    attribute: c1d0d94b-5feb-4ebb-a527-0b0a34196252,\n                },\n            }]),\n        },\n        {\n            refId: B,\n            type: QUERY,\n            expressionPlain: ,\n            queryPlain: json.dumps([{\n                $match: {\n                    asset: 49551a15-d79b-40dc-9434-1b33d6b2fcb2,\n                    attribute: c1d0d94b-5feb-4ebb-a527-0b0a34196252,\n                },\n            }]),\n        },\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.Json;\nusing Pulumi;\nusing Spl = Pulumi.Spl;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var functionTest = new Spl.Index.Spl_function(\"functionTest\", new()\n    {\n        Name = \"FunctionTest\",\n        Description = \"Created with Terraform\",\n        Type = \"rate\",\n        TimeWindow = 600,\n        RateValue = 10,\n        RateUnit = \"minute\",\n        TargetVariable = \"A\",\n        TargetAsset = \n        {\n            { \"id\", \"49551a15-d79b-40dc-9434-1b33d6b2fcb2\" },\n            { \"name\", \"An asset\" },\n        },\n        TargetAttribute = \n        {\n            { \"id\", \"49551a15-d79b-40dc-9434-1b33d6b2fcb2\" },\n            { \"name\", \"An attribute\" },\n        },\n        FunctionItems = new[]\n        {\n            \n            {\n                { \"refId\", \"A\" },\n                { \"type\", \"QUERY\" },\n                { \"expressionPlain\", \"\" },\n                { \"queryPlain\", JsonSerializer.Serialize(new[]\n                {\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"$match\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"asset\"] = \"49551a15-d79b-40dc-9434-1b33d6b2fcb2\",\n                            [\"attribute\"] = \"c1d0d94b-5feb-4ebb-a527-0b0a34196252\",\n                        },\n                    },\n                }) },\n            },\n            \n            {\n                { \"refId\", \"B\" },\n                { \"type\", \"QUERY\" },\n                { \"expressionPlain\", \"\" },\n                { \"queryPlain\", JsonSerializer.Serialize(new[]\n                {\n                    new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"$match\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"asset\"] = \"49551a15-d79b-40dc-9434-1b33d6b2fcb2\",\n                            [\"attribute\"] = \"c1d0d94b-5feb-4ebb-a527-0b0a34196252\",\n                        },\n                    },\n                }) },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/pulumi/pulumi-spl/sdk/v1/go/spl\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\nfunc main() {\npulumi.Run(func(ctx *pulumi.Context) error {\n_, err := index.NewSpl_function(ctx, \"functionTest\", \u0026index.Spl_functionArgs{\nName: \"FunctionTest\",\nDescription: \"Created with Terraform\",\nType: \"rate\",\nTimeWindow: 600,\nRateValue: 10,\nRateUnit: \"minute\",\nTargetVariable: \"A\",\nTargetAsset: map[string]interface{}{\n\"id\": \"49551a15-d79b-40dc-9434-1b33d6b2fcb2\",\n\"name\": \"An asset\",\n},\nTargetAttribute: map[string]interface{}{\n\"id\": \"49551a15-d79b-40dc-9434-1b33d6b2fcb2\",\n\"name\": \"An attribute\",\n},\nFunctionItems: tmpJSON0, err := json.Marshal([]map[string]interface{}{\nmap[string]interface{}{\n\"$match\": map[string]interface{}{\n\"asset\": \"49551a15-d79b-40dc-9434-1b33d6b2fcb2\",\n\"attribute\": \"c1d0d94b-5feb-4ebb-a527-0b0a34196252\",\n},\n},\n})\nif err != nil {\nreturn err\n}\njson0 := string(tmpJSON0)\ntmpJSON1, err := json.Marshal([]map[string]interface{}{\nmap[string]interface{}{\n\"$match\": map[string]interface{}{\n\"asset\": \"49551a15-d79b-40dc-9434-1b33d6b2fcb2\",\n\"attribute\": \"c1d0d94b-5feb-4ebb-a527-0b0a34196252\",\n},\n},\n})\nif err != nil {\nreturn err\n}\njson1 := string(tmpJSON1)\n[]map[string]interface{}{\nmap[string]interface{}{\n\"refId\": \"A\",\n\"type\": \"QUERY\",\n\"expressionPlain\": \"\",\n\"queryPlain\": json0,\n},\nmap[string]interface{}{\n\"refId\": \"B\",\n\"type\": \"QUERY\",\n\"expressionPlain\": \"\",\n\"queryPlain\": json1,\n},\n},\n})\nif err != nil {\nreturn err\n}\nreturn nil\n})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.spl.spl_function;\nimport com.pulumi.spl.Spl_functionArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var functionTest = new Spl_function(\"functionTest\", Spl_functionArgs.builder()        \n            .name(\"FunctionTest\")\n            .description(\"Created with Terraform\")\n            .type(\"rate\")\n            .timeWindow(600)\n            .rateValue(10)\n            .rateUnit(\"minute\")\n            .targetVariable(\"A\")\n            .targetAsset(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n            .targetAttribute(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n            .functionItems(            \n                %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference),\n                %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  functionTest:\n    type: spl:spl_function\n    properties:\n      name: FunctionTest\n      description: Created with Terraform\n      type: rate\n      timeWindow: 600\n      rateValue: 10\n      rateUnit: minute\n      targetVariable: A\n      targetAsset:\n        id: 49551a15-d79b-40dc-9434-1b33d6b2fcb2\n        name: An asset\n      targetAttribute:\n        id: 49551a15-d79b-40dc-9434-1b33d6b2fcb2\n        name: An attribute\n      functionItems:\n        - refId: A\n          type: QUERY\n          expressionPlain:\n          queryPlain:\n            fn::toJSON:\n              - $match:\n                  asset: 49551a15-d79b-40dc-9434-1b33d6b2fcb2\n                  attribute: c1d0d94b-5feb-4ebb-a527-0b0a34196252\n        - refId: B\n          type: QUERY\n          expressionPlain:\n          queryPlain:\n            fn::toJSON:\n              - $match:\n                  asset: 49551a15-d79b-40dc-9434-1b33d6b2fcb2\n                  attribute: c1d0d94b-5feb-4ebb-a527-0b0a34196252\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import splight:index/function:Function [options] spl_function.\u003cname\u003e \u003cfunction_id\u003e\n```\n\n",
            "properties": {
                "cronDom": {
                    "type": "integer",
                    "description": "schedule value for cron\n"
                },
                "cronDow": {
                    "type": "integer",
                    "description": "schedule value for cron\n"
                },
                "cronHours": {
                    "type": "integer",
                    "description": "schedule value for cron\n"
                },
                "cronMinutes": {
                    "type": "integer",
                    "description": "schedule value for cron\n"
                },
                "cronMonth": {
                    "type": "integer",
                    "description": "schedule value for cron\n"
                },
                "cronYear": {
                    "type": "integer",
                    "description": "schedule value for cron\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the resource\n"
                },
                "functionItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/FunctionFunctionItem:FunctionFunctionItem"
                    },
                    "description": "traces to be used to compute the results\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the resource\n"
                },
                "rateUnit": {
                    "type": "string",
                    "description": "[day|hour|minute] schedule unit\n"
                },
                "rateValue": {
                    "type": "integer",
                    "description": "schedule value\n"
                },
                "targetAsset": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "asset where to ingest results\n"
                },
                "targetAttribute": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "attribute where to ingest results\n"
                },
                "targetVariable": {
                    "type": "string",
                    "description": "variable to be considered to be ingested\n"
                },
                "timeWindow": {
                    "type": "integer",
                    "description": "window to fetch data from. Data out of that window will not be considered for evaluation\n"
                },
                "type": {
                    "type": "string",
                    "description": "[cron|rate] type for the cron\n"
                }
            },
            "required": [
                "cronDom",
                "cronDow",
                "cronHours",
                "cronMinutes",
                "cronMonth",
                "cronYear",
                "description",
                "functionItems",
                "name",
                "rateUnit",
                "rateValue",
                "targetAsset",
                "targetAttribute",
                "targetVariable",
                "timeWindow",
                "type"
            ],
            "inputProperties": {
                "cronDom": {
                    "type": "integer",
                    "description": "schedule value for cron\n"
                },
                "cronDow": {
                    "type": "integer",
                    "description": "schedule value for cron\n"
                },
                "cronHours": {
                    "type": "integer",
                    "description": "schedule value for cron\n"
                },
                "cronMinutes": {
                    "type": "integer",
                    "description": "schedule value for cron\n"
                },
                "cronMonth": {
                    "type": "integer",
                    "description": "schedule value for cron\n"
                },
                "cronYear": {
                    "type": "integer",
                    "description": "schedule value for cron\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the resource\n"
                },
                "functionItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/splight:index/FunctionFunctionItem:FunctionFunctionItem"
                    },
                    "description": "traces to be used to compute the results\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the resource\n"
                },
                "rateUnit": {
                    "type": "string",
                    "description": "[day|hour|minute] schedule unit\n"
                },
                "rateValue": {
                    "type": "integer",
                    "description": "schedule value\n"
                },
                "targetAsset": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "asset where to ingest results\n"
                },
                "targetAttribute": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "attribute where to ingest results\n"
                },
                "targetVariable": {
                    "type": "string",
                    "description": "variable to be considered to be ingested\n"
                },
                "timeWindow": {
                    "type": "integer",
                    "description": "window to fetch data from. Data out of that window will not be considered for evaluation\n"
                },
                "type": {
                    "type": "string",
                    "description": "[cron|rate] type for the cron\n"
                }
            },
            "requiredInputs": [
                "description",
                "functionItems",
                "targetAsset",
                "targetAttribute",
                "targetVariable",
                "timeWindow",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Function resources.\n",
                "properties": {
                    "cronDom": {
                        "type": "integer",
                        "description": "schedule value for cron\n"
                    },
                    "cronDow": {
                        "type": "integer",
                        "description": "schedule value for cron\n"
                    },
                    "cronHours": {
                        "type": "integer",
                        "description": "schedule value for cron\n"
                    },
                    "cronMinutes": {
                        "type": "integer",
                        "description": "schedule value for cron\n"
                    },
                    "cronMonth": {
                        "type": "integer",
                        "description": "schedule value for cron\n"
                    },
                    "cronYear": {
                        "type": "integer",
                        "description": "schedule value for cron\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the resource\n"
                    },
                    "functionItems": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/FunctionFunctionItem:FunctionFunctionItem"
                        },
                        "description": "traces to be used to compute the results\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the resource\n"
                    },
                    "rateUnit": {
                        "type": "string",
                        "description": "[day|hour|minute] schedule unit\n"
                    },
                    "rateValue": {
                        "type": "integer",
                        "description": "schedule value\n"
                    },
                    "targetAsset": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "asset where to ingest results\n"
                    },
                    "targetAttribute": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "attribute where to ingest results\n"
                    },
                    "targetVariable": {
                        "type": "string",
                        "description": "variable to be considered to be ingested\n"
                    },
                    "timeWindow": {
                        "type": "integer",
                        "description": "window to fetch data from. Data out of that window will not be considered for evaluation\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "[cron|rate] type for the cron\n"
                    }
                },
                "type": "object"
            }
        },
        "splight:index/secret:Secret": {
            "description": "Provides a Cloudflare Observatory Scheduled Test resource.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as spl from \"@pulumi/spl\";\n\nconst secretTest = new spl.index.Spl_secret(\"secretTest\", {\n    name: \"SecretTest\",\n    rawValue: \"ASUPERSECR3T\",\n});\n```\n```python\nimport pulumi\nimport pulumi_spl as spl\n\nsecret_test = spl.index.Spl_secret(\"secretTest\",\n    name=SecretTest,\n    raw_value=ASUPERSECR3T)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Spl = Pulumi.Spl;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var secretTest = new Spl.Index.Spl_secret(\"secretTest\", new()\n    {\n        Name = \"SecretTest\",\n        RawValue = \"ASUPERSECR3T\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-spl/sdk/v1/go/spl\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := index.NewSpl_secret(ctx, \"secretTest\", \u0026index.Spl_secretArgs{\n\t\t\tName:     \"SecretTest\",\n\t\t\tRawValue: \"ASUPERSECR3T\",\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.spl.spl_secret;\nimport com.pulumi.spl.Spl_secretArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var secretTest = new Spl_secret(\"secretTest\", Spl_secretArgs.builder()        \n            .name(\"SecretTest\")\n            .rawValue(\"ASUPERSECR3T\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  secretTest:\n    type: spl:spl_secret\n    properties:\n      name: SecretTest\n      rawValue: ASUPERSECR3T\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import splight:index/secret:Secret [options] spl_secret.\u003cname\u003e \u003csecret_id\u003e\n```\n\n",
            "properties": {
                "name": {
                    "type": "string"
                },
                "rawValue": {
                    "type": "string",
                    "secret": true
                },
                "value": {
                    "type": "string"
                }
            },
            "required": [
                "name",
                "rawValue",
                "value"
            ],
            "inputProperties": {
                "name": {
                    "type": "string"
                },
                "rawValue": {
                    "type": "string",
                    "secret": true
                }
            },
            "requiredInputs": [
                "rawValue"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Secret resources.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "rawValue": {
                        "type": "string",
                        "secret": true
                    },
                    "value": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "splight:index/getAssetKinds:getAssetKinds": {
            "description": "Data source to fetch all asset kinds defined in the platform\n",
            "outputs": {
                "description": "A collection of values returned by getAssetKinds.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "kinds": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/splight:index/getAssetKindsKind:getAssetKindsKind"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "kinds",
                    "id"
                ]
            }
        }
    }
}